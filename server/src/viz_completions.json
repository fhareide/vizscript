{
	"intellisense": {
		"completions": [
			{
				"name": "Alpha",
				"descripton": "An alpha object. This is used to control a container's alpha value.",
				"properties": [
					{
						"name": "Active",
						"code_hint": "Active As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Value",
						"code_hint": "Value As Double",
						"description": "The alpha value [0.0, 100.0]",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Array",
				"descripton": "A dynamic, one-dimensional array. The element type must be specified in brackets. Use the index operator [] to access individual elements. Negative indices refer to elements at the end of the array.",
				"properties": [
					{
						"name": "LBound",
						"code_hint": "LBound As Integer [read-only]",
						"description": "The index of the first elment (always 0)",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Size",
						"code_hint": "Size As Integer",
						"description": "The size of the array (this member can be set to change the size)",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "UBound",
						"code_hint": "UBound As Integer [read-only]",
						"description": "The index of the last elment (-1 if the array is empty)",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "Clear",
						"code_hint": "Sub Clear()",
						"description": "erases all elements",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Erase",
						"code_hint": "Sub Erase(index As Integer)",
						"description": "Erases the element at 'index'.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Insert",
						"code_hint": "Sub Insert(index As Integer, element As Type)",
						"description": "Inserts a new element at 'index'.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Pop",
						"code_hint": "Sub Pop()",
						"description": "removes the last element",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Push",
						"code_hint": "Sub Push(element As Type)",
						"description": "Inserts a new element at the end of the array.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Sort",
						"code_hint": "Function Sort(object As Base, comparisonFunction As String) As Boolean",
						"description": "Sorts the array. comparisonFunction must be the name of a user-defined comparison function that takes two arguments of type Type and returns an integer. The return value must be -1 if the the first arguement is smaller than the second, 1 if the first argument is greater than the second, and 0 if the arguments are equal. object is the this pointer passed to the comparison function. It may be null if the camparison function does not access any member variables. The comparison function must be defined in the same script as the Type (if it is a structure) or in the script where Sort is called.",
						"return_value": "Boolean",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "AVChannel",
				"descripton": "Base class for Audio Video Channel objects",
				"properties": [
					{
						"name": "Alpha",
						"code_hint": "Alpha As Double",
						"description": "Alpha of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Center",
						"code_hint": "Center As Vertex",
						"description": "Transformation center of this AVChannel",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentBorderColor",
						"code_hint": "ContentBorderColor As Color",
						"description": "AVChannel content border color",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "ContentCenter",
						"code_hint": "ContentCenter As Vertex",
						"description": "AVChannel content relative center in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentCropBottom",
						"code_hint": "ContentCropBottom As Integer",
						"description": "AVChannel content bottom crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropLeft",
						"code_hint": "ContentCropLeft As Integer",
						"description": "AVChannel content left crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropRight",
						"code_hint": "ContentCropRight As Integer",
						"description": "AVChannel content right crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropTop",
						"code_hint": "ContentCropTop As Integer",
						"description": "AVChannel content top crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentPosition",
						"code_hint": "ContentPosition As Vertex",
						"description": "AVChannel content relative position in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentSize",
						"code_hint": "ContentSize As Vertex",
						"description": "AVChannel content relative size in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentZoomMode",
						"code_hint": "ContentZoomMode As Integer",
						"description": "AVChannel content zoom mode",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ControlledAnimation",
						"code_hint": "ControlledAnimation As Boolean",
						"description": "Is animation controlled by parent Scene or by this AVChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CropBottom",
						"code_hint": "CropBottom As Double",
						"description": "Bottom crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropLeft",
						"code_hint": "CropLeft As Double",
						"description": "Left crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropRight",
						"code_hint": "CropRight As Double",
						"description": "Right crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropTop",
						"code_hint": "CropTop As Double",
						"description": "Top crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "ForceKey",
						"code_hint": "ForceKey As Boolean",
						"description": "Force key of this AVChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "KeepAspect",
						"code_hint": "KeepAspect As Boolean",
						"description": "Keep aspect of this AVChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MasterVolume",
						"code_hint": "MasterVolume As Double",
						"description": "Master volume of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Position",
						"code_hint": "Position As Vertex",
						"description": "Position of this AVChannel",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "ScreenCenter",
						"code_hint": "ScreenCenter As Vertex",
						"description": "Transformation center of this AVChannel (in Pixels)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropBottom",
						"code_hint": "ScreenCropBottom As Double",
						"description": "Bottom crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropLeft",
						"code_hint": "ScreenCropLeft As Double",
						"description": "Left crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropRight",
						"code_hint": "ScreenCropRight As Double",
						"description": "Right crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropTop",
						"code_hint": "ScreenCropTop As Double",
						"description": "Top crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenPosition",
						"code_hint": "ScreenPosition As Vertex",
						"description": "Position of this AVChannel (in Pixels)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenSize",
						"code_hint": "ScreenSize As Vertex",
						"description": "Size of this AVChannel (in Pixels)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Size",
						"code_hint": "Size As Vertex",
						"description": "Size of this AVChannel",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetAudioChannelVolume",
						"code_hint": "Function GetAudioChannelVolume(param_1 As Integer) As Double",
						"description": "Volume of audio channel (up to 16 channels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsValid",
						"code_hint": "Function IsValid() As Boolean",
						"description": "Checks if this AVChannel is valid",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetAudioChannelVolume",
						"code_hint": "Function SetAudioChannelVolume(param_1 As Integer) As Double",
						"description": "Volume of audio channel (up to 16 channels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Base",
				"descripton": "A viz object. This is the base class of all other viz types.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "NumChannels",
						"code_hint": "NumChannels As Integer [read-only]",
						"description": "Deprecated. Use IsAnimated or GetChannelsOfObject instead.",
						"return_value": "Integer",
						"deprecated": "true"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "FindChannel",
						"code_hint": "Function FindChannel(channelName As String) As Channel",
						"description": "Deprecated. Use FindChannelOfObject",
						"return_value": "Channel",
						"deprecated": "true"
					},
					{
						"name": "FindKeyframe",
						"code_hint": "Function FindKeyframe(keyframeName As String) As Keyframe",
						"description": "Deprecated. Use FindKeyframeOfObject",
						"return_value": "Keyframe",
						"deprecated": "true"
					},
					{
						"name": "GetChannels",
						"code_hint": "Function GetChannels([out] v As Array[Channel]) As Integer",
						"description": "Deprecated. Use GetChannelsOfObject",
						"return_value": "Integer",
						"deprecated": "true"
					},
					{
						"name": "GetNumberOfAnimationChannels",
						"code_hint": "Function GetNumberOfAnimationChannels() As Integer",
						"description": "Deprecated. Use IsAnimated instead.",
						"return_value": "Integer",
						"deprecated": "true"
					}
				]
			},
			{
				"name": "BezierHandle",
				"descripton": "A spline handle of a keyframe.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "LeftAngle",
						"code_hint": "LeftAngle As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "LeftInterpolationMode",
						"code_hint": "LeftInterpolationMode As Integer",
						"description": "HANDLE_INTERPOLATION_MODE_SMOOTH\nHANDLE_INTERPOLATION_MODE_LINEAR",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "LeftWeight",
						"code_hint": "LeftWeight As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "LockMode",
						"code_hint": "LockMode As Integer",
						"description": "HANDLE_LOCK_MODE_LOCKED\nHANDLE_LOCK_MODE_SINGLE\nHANDLE_LOCK_MODE_MIRROR",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RightAngle",
						"code_hint": "RightAngle As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "RightInterpolationMode",
						"code_hint": "RightInterpolationMode As Integer",
						"description": "HANDLE_INTERPOLATION_MODE_SMOOTH\nHANDLE_INTERPOLATION_MODE_LINEAR",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RightWeight",
						"code_hint": "RightWeight As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Boolean",
				"descripton": "A flag that is either true or false.",
				"properties": [],
				"methods": []
			},
			{
				"name": "Camera",
				"descripton": "A camera object. Camera objects are returned by the Scene's CurrentCamera and GetCamera members.",
				"properties": [
					{
						"name": "ActiveExt",
						"code_hint": "ActiveExt As Boolean",
						"description": "Activates/Deactivates the external camera.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Cx",
						"code_hint": "Cx As Double",
						"description": "The center shift in x",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CxExt",
						"code_hint": "CxExt As Double [read-only]",
						"description": "The center shift in x of the external camera",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Cy",
						"code_hint": "Cy As Double",
						"description": "The center shift in y",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CyExt",
						"code_hint": "CyExt As Double [read-only]",
						"description": "The center shift in y of the external camera",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "DecoupleExternal",
						"code_hint": "DecoupleExternal As Boolean",
						"description": "If true, viz receives external camera data without copying them to its internal camera structures for rendering.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Direction",
						"code_hint": "Direction As Position",
						"description": "The direction of the camera",
						"return_value": "Position",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "FocalPlane",
						"code_hint": "FocalPlane As Double",
						"description": "The focal plane",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Fovx",
						"code_hint": "Fovx As Double",
						"description": "The field of view in x",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "FovxExt",
						"code_hint": "FovxExt As Double [read-only]",
						"description": "The field of view in x of the external camera",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Fovy",
						"code_hint": "Fovy As Double",
						"description": "The field of view in y",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "FovyExt",
						"code_hint": "FovyExt As Double [read-only]",
						"description": "The field of view in y of the external camera",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Matrix",
						"code_hint": "Matrix As Matrix [read-only]",
						"description": "The model matrix of the camera.",
						"return_value": "Matrix",
						"deprecated": "false"
					},
					{
						"name": "Pan",
						"code_hint": "Pan As Double",
						"description": "The pan",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "PanExt",
						"code_hint": "PanExt As Double [read-only]",
						"description": "The pan of the external camera",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Position",
						"code_hint": "Position As Position",
						"description": "The camera position",
						"return_value": "Position",
						"deprecated": "false"
					},
					{
						"name": "PositionExt",
						"code_hint": "PositionExt As Position [read-only]",
						"description": "The position of the external camera",
						"return_value": "Position",
						"deprecated": "false"
					},
					{
						"name": "PositionTrackingActive",
						"code_hint": "PositionTrackingActive As Boolean",
						"description": "Is position tracking active?",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "PositionTrackingContainer",
						"code_hint": "PositionTrackingContainer As Container",
						"description": "The tracking object for position tracking",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "ProjectionMatrix",
						"code_hint": "ProjectionMatrix As Matrix [read-only]",
						"description": "The projection matrix of the camera.",
						"return_value": "Matrix",
						"deprecated": "false"
					},
					{
						"name": "RotationTrackingActive",
						"code_hint": "RotationTrackingActive As Boolean",
						"description": "Is rotation tracking active?",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "RotationTrackingContainer",
						"code_hint": "RotationTrackingContainer As Container",
						"description": "The tracking object for rotation tracking",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Tilt",
						"code_hint": "Tilt As Double",
						"description": "The tilt",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "TiltExt",
						"code_hint": "TiltExt As Double [read-only]",
						"description": "The tilt of the external camera",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Twist",
						"code_hint": "Twist As Double",
						"description": "The twist",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "TwistExt",
						"code_hint": "TwistExt As Double [read-only]",
						"description": "The twist of the external camera",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "View",
						"code_hint": "View As Integer",
						"description": "The view type:\nCAM_VIEW_PERSPECTIVE\nCAM_VIEW_ORTHOGONAL",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ViewMatrix",
						"code_hint": "ViewMatrix As Matrix [read-only]",
						"description": "The view matrix of the camera.",
						"return_value": "Matrix",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ResetPositionTracking",
						"code_hint": "Sub ResetPositionTracking()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ResetRotationTracking",
						"code_hint": "Sub ResetRotationTracking()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Center",
				"descripton": "A center object. This is used to control the center of a container.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "x",
						"code_hint": "x As Double",
						"description": "Gets or sets the x component.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "xyz",
						"code_hint": "xyz As Vertex",
						"description": "Gets or sets the x, y, z components combined into a vertex.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "y",
						"code_hint": "y As Double",
						"description": "Gets or sets the y component.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "z",
						"code_hint": "z As Double",
						"description": "Gets or sets the z component.",
						"return_value": "Double",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Channel",
				"descripton": "A channel of a director.",
				"properties": [
					{
						"name": "Actor",
						"code_hint": "Actor As Base [read-only]",
						"description": "",
						"return_value": "Base",
						"deprecated": "false"
					},
					{
						"name": "AnimationObject",
						"code_hint": "AnimationObject As Base [read-only]",
						"description": "",
						"return_value": "Base",
						"deprecated": "false"
					},
					{
						"name": "CommandName",
						"code_hint": "CommandName As String [read-only]",
						"description": "",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Director",
						"code_hint": "Director As Director [read-only]",
						"description": "",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "FirstKeyframe",
						"code_hint": "FirstKeyframe As Keyframe [read-only]",
						"description": "Gets the leftmost keyframe.",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "KeyframeCount",
						"code_hint": "KeyframeCount As Integer [read-only]",
						"description": "Gets the number of keyframes.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "LastKeyframe",
						"code_hint": "LastKeyframe As Keyframe [read-only]",
						"description": "Gets the rightmost keyframe.",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "Name",
						"code_hint": "Name As String",
						"description": "",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "offset",
						"code_hint": "offset As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "PostLoopActive",
						"code_hint": "PostLoopActive As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "PostLoopCounter",
						"code_hint": "PostLoopCounter As Integer",
						"description": "",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PostSwingActive",
						"code_hint": "PostSwingActive As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "PreLoopActive",
						"code_hint": "PreLoopActive As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "PreLoopCounter",
						"code_hint": "PreLoopCounter As Integer",
						"description": "",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PreSwingActive",
						"code_hint": "PreSwingActive As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "NumKeyframes",
						"code_hint": "NumKeyframes As Integer [read-only]",
						"description": "Deprecated. Use KeyframeCount.",
						"return_value": "Integer",
						"deprecated": "true"
					}
				],
				"methods": [
					{
						"name": "AddKeyframe",
						"code_hint": "Function AddKeyframe(time As Double) As Keyframe",
						"description": "",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "CopyToDirector",
						"code_hint": "Function CopyToDirector(destination As Director) As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Delete",
						"code_hint": "Sub Delete()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "DeleteKeyframe",
						"code_hint": "Function DeleteKeyframe(kf As Keyframe) As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "DeleteKeyframe",
						"code_hint": "Function DeleteKeyframe(index As Integer) As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframe",
						"code_hint": "Function FindKeyframe(keyframeName As String) As Keyframe",
						"description": "Searches for a keyframe named keyframeName.",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetKeyframe",
						"code_hint": "Function GetKeyframe(n As Integer) As Keyframe",
						"description": "Returns the n'th keyframe of the channel.",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MoveToDirector",
						"code_hint": "Function MoveToDirector(destination As Director) As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Rebuild",
						"code_hint": "Sub Rebuild()",
						"description": "Rebuilds the channel after it has been modified. Normally, there is no need to call this procedure.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "ClipChannel",
				"descripton": "A ClipChannel object. The ClipChannel member of the Base type provides access to the clip channel. Use System.GetClipChannel(number as Integer), whereas number >= 0, to get a ClipChannel instance. See also examples section ClipChannel.",
				"properties": [
					{
						"name": "Alpha",
						"code_hint": "Alpha As Double",
						"description": "Get/Set the Alpha value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "AutoRun",
						"code_hint": "AutoRun As Boolean",
						"description": "Get/Set the autorun mode. If true then the clip start playing automatically upon load.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ClipChannelID",
						"code_hint": "ClipChannelID As Integer [read-only]",
						"description": "Get the clip channel number.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "CropBottom",
						"code_hint": "CropBottom As Double",
						"description": "Get/Set the Crop Bottom value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropLeft",
						"code_hint": "CropLeft As Double",
						"description": "Get/Set the Crop Left value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropRight",
						"code_hint": "CropRight As Double",
						"description": "Get/Set the Crop Right value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropTop",
						"code_hint": "CropTop As Double",
						"description": "Get/Set the Crop Top value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CurrentFrame",
						"code_hint": "CurrentFrame As Integer [read-only]",
						"description": "Get the current frame.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "CurrentFramePending",
						"code_hint": "CurrentFramePending As Integer [read-only]",
						"description": "Get the current frame of the pending clip.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Duration",
						"code_hint": "Duration As Integer [read-only]",
						"description": "Get the number of frames of the current clip.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "DurationPending",
						"code_hint": "DurationPending As Integer [read-only]",
						"description": "Get the number of frames of the pending clip.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "FrameIn",
						"code_hint": "FrameIn As Integer",
						"description": "Get/Set the In frame.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "FrameInActive",
						"code_hint": "FrameInActive As Integer",
						"description": "Get/Set the In frame on the active clip player.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "FrameInPending",
						"code_hint": "FrameInPending As Integer",
						"description": "Get/Set the In frame on the pending clip player.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "FrameOut",
						"code_hint": "FrameOut As Integer",
						"description": "Get/Set the Out frame.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "FrameOutActive",
						"code_hint": "FrameOutActive As Integer",
						"description": "Get/Set the Out frame on the active clip player.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "FrameOutPending",
						"code_hint": "FrameOutPending As Integer",
						"description": "Get/Set the Out frame on the pending clip player.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Height",
						"code_hint": "Height As Double",
						"description": "Get/Set the Height value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "LoopCount",
						"code_hint": "LoopCount As Integer",
						"description": "Get/Set the loop count for 3/4-point loop.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "LoopInFrame",
						"code_hint": "LoopInFrame As Integer",
						"description": "Get/Set the loop in time for 3/4-point loop.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "LoopMode",
						"code_hint": "LoopMode As Boolean",
						"description": "Get/Set the loop mode. If true (=default), then the clip will be looped.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "LoopModeActive",
						"code_hint": "LoopModeActive As Boolean",
						"description": "Get/Set the loop mode on the active clip player. If true (=default), then the clip will be looped.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "LoopModePending",
						"code_hint": "LoopModePending As Boolean",
						"description": "Get/Set the loop mode on the pending clip player. If true (=default), then the clip will be looped.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "LoopOutFrame",
						"code_hint": "LoopOutFrame As Integer",
						"description": "Get/Set the loop out time for 3/4-point loop.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "MasterVolume",
						"code_hint": "MasterVolume As Double",
						"description": "Get/Set the MasterVolume value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ModeOnLoadError",
						"code_hint": "ModeOnLoadError As Integer",
						"description": "Determines the mode upon an error situation when loading a clip. none|pause|stop|flush",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ModeOnLoadError_FLUSH",
						"code_hint": "ModeOnLoadError_FLUSH As Integer [read-only]",
						"description": "Constant for mode on load error flush.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ModeOnLoadError_NONE",
						"code_hint": "ModeOnLoadError_NONE As Integer [read-only]",
						"description": "Constant for mode on load error none.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ModeOnLoadError_PAUSE",
						"code_hint": "ModeOnLoadError_PAUSE As Integer [read-only]",
						"description": "Constant for mode on load error pause.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ModeOnLoadError_STOP",
						"code_hint": "ModeOnLoadError_STOP As Integer [read-only]",
						"description": "Constant for mode on load error stop.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PendingClipSupported",
						"code_hint": "PendingClipSupported As Boolean [read-only]",
						"description": "Determines if support for loading pending clips is available.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "PlayBackSpeed",
						"code_hint": "PlayBackSpeed As Double",
						"description": "Get/Set the playback speed.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "PlayBackSpeedActive",
						"code_hint": "PlayBackSpeedActive As Double",
						"description": "Get/Set the playback speed on the active clip player.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "PlayBackSpeedPending",
						"code_hint": "PlayBackSpeedPending As Double",
						"description": "Get/Set the playback speed on the pending clip palyer.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "PlayerStatus_PENDINGREADY",
						"code_hint": "PlayerStatus_PENDINGREADY As Integer [read-only]",
						"description": "Constant for current player status PENDINGREADY.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PlayMode",
						"code_hint": "PlayMode As Integer [read-only]",
						"description": "Get the current mode of the clip channel.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PlayMode_ERROR",
						"code_hint": "PlayMode_ERROR As Integer [read-only]",
						"description": "Constant for current mode ERROR.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PlayMode_NONE",
						"code_hint": "PlayMode_NONE As Integer [read-only]",
						"description": "Constant for current mode NONE.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PlayMode_PLAY",
						"code_hint": "PlayMode_PLAY As Integer [read-only]",
						"description": "Constant for current mode PLAYING.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PlayMode_PLAY_PENDING",
						"code_hint": "PlayMode_PLAY_PENDING As Integer [read-only]",
						"description": "Constant for current mode PLAYING_PENDING.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PlayMode_SCRUB",
						"code_hint": "PlayMode_SCRUB As Integer [read-only]",
						"description": "Constant for current mode SCRUBBING.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PlayMode_SCRUB_EOF",
						"code_hint": "PlayMode_SCRUB_EOF As Integer [read-only]",
						"description": "Constant for current mode SCRUBBING_EOF.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PlayMode_STOP",
						"code_hint": "PlayMode_STOP As Integer [read-only]",
						"description": "Constant for current mode STOP.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PlayModePending",
						"code_hint": "PlayModePending As Integer [read-only]",
						"description": "Get the current mode of the pending clip player.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PosX",
						"code_hint": "PosX As Double",
						"description": "Get/Set the Position X value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "PosY",
						"code_hint": "PosY As Double",
						"description": "Get/Set the Position Y value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "RepeatMode",
						"code_hint": "RepeatMode As Integer",
						"description": "Get/Set the repeat mode for playback and pause. none|field|frame.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RepeatMode_FIELD",
						"code_hint": "RepeatMode_FIELD As Integer [read-only]",
						"description": "Constant for repeat mode field.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RepeatMode_FRAME",
						"code_hint": "RepeatMode_FRAME As Integer [read-only]",
						"description": "Constant for repeat mode frame.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RepeatMode_NONE",
						"code_hint": "RepeatMode_NONE As Integer [read-only]",
						"description": "Constant for repeat mode none.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RepeatModeActive",
						"code_hint": "RepeatModeActive As Integer",
						"description": "Get/Set the repeat mode for playback and pause on the active clip player. none|field|frame.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RepeatModePending",
						"code_hint": "RepeatModePending As Integer",
						"description": "Get/Set the repeat mode for playback and pause on the pending clip player. none|field|frame.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ReverseFields",
						"code_hint": "ReverseFields As Boolean",
						"description": "If true swap fields when playing interlaced material backwards.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ReverseFieldsActive",
						"code_hint": "ReverseFieldsActive As Boolean",
						"description": "If true swap fields when playing interlaced material backwards on the active clip player.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ReverseFieldsPending",
						"code_hint": "ReverseFieldsPending As Boolean",
						"description": "If true swap fields when playing interlaced material backwards on the pending clip player.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "UpscaleLuma",
						"code_hint": "UpscaleLuma As Boolean",
						"description": "If true then upscale the luma value in the separate key file.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "UpscaleLumaActive",
						"code_hint": "UpscaleLumaActive As Boolean",
						"description": "If true then upscale the luma value in the separate key file on the active clip player.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "UpscaleLumaPending",
						"code_hint": "UpscaleLumaPending As Boolean",
						"description": "If true then upscale the luma value in the separate key file on the pending clip player.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Width",
						"code_hint": "Width As Double",
						"description": "Get/Set the Width value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "AnimationLoopConfigured",
						"code_hint": "Function AnimationLoopConfigured() As Boolean",
						"description": "Returns true if the channel has a valid animation loop, false otherwise.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "AnimationLoopFlush",
						"code_hint": "Sub AnimationLoopFlush()",
						"description": "Resets all values to their default values.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "AnimationLoopStop",
						"code_hint": "Sub AnimationLoopStop()",
						"description": "Sets the loop count to 0 and stops the actual loop.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "AnimationStageScrub",
						"code_hint": "Sub AnimationStageScrub(param_1 As Integer)",
						"description": "Resets all values to their default values.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Continue",
						"code_hint": "Sub Continue()",
						"description": "Resume playback from Pause.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ContinueActive",
						"code_hint": "Sub ContinueActive()",
						"description": "Resume playback from Pause in active clip player.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ContinuePending",
						"code_hint": "Sub ContinuePending()",
						"description": "Resume playback from Pause in pending clip player.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ConvertFramesToSeconds",
						"code_hint": "Function ConvertFramesToSeconds(param_1 As Integer) As Double",
						"description": "Converts frames to seconds.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ConvertSecondsToFrames",
						"code_hint": "Function ConvertSecondsToFrames(param_1 As Double) As Integer",
						"description": "Converts seconds to frames.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "Flush",
						"code_hint": "Sub Flush()",
						"description": "Unload active and pending clip.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "FlushActive",
						"code_hint": "Sub FlushActive()",
						"description": "Unload active clip.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "FlushPending",
						"code_hint": "Sub FlushPending()",
						"description": "Unload pending clip.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetClipName",
						"code_hint": "Function GetClipName() As String",
						"description": "Get the ClipName currently loaded.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetClipNameAbsolute",
						"code_hint": "Function GetClipNameAbsolute(ClipName As String) As String",
						"description": "Get absolute clip name.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetClipNameActive",
						"code_hint": "Function GetClipNameActive() As String",
						"description": "Get the ClipName currently loaded in the active clip player.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetClipNamePending",
						"code_hint": "Function GetClipNamePending() As String",
						"description": "Get the ClipName currently loaded in the pending clip player.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetFramesPerSecond",
						"code_hint": "Function GetFramesPerSecond() As Double",
						"description": "Get the frames per second.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "GetRegisterChangedClipFrame",
						"code_hint": "Function GetRegisterChangedClipFrame() As String",
						"description": "Returns the registered ShmKey set by SetRegisterChangedClipFrame or an empty string if not set.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetRegisterChangedClipMode",
						"code_hint": "Function GetRegisterChangedClipMode() As String",
						"description": "Returns the registered ShmKey set by SetRegisterChangedClipMode or an empty string if not set.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetRegisterChangedClipModePending",
						"code_hint": "Function GetRegisterChangedClipModePending() As String",
						"description": "Returns the registered ShmKey set by SetRegisterChangedClipModePending or an empty string if not set.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetReportValues",
						"code_hint": "Sub GetReportValues([out] Duration As Integer, [out] CurrentFrame As Integer, [out] PlayMode As Integer)",
						"description": "Shortcut for Duration(), CurrentFrame(), PlayMode().",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetReportValuesPending",
						"code_hint": "Sub GetReportValuesPending([out] Duration As Integer, [out] CurrentFrame As Integer, [out] PlayMode As Integer)",
						"description": "Shortcut for Duration(), CurrentFrame(), PlayMode().",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsClipLoaded",
						"code_hint": "Function IsClipLoaded(ClipName As String) As Boolean",
						"description": "Determines if given clip is loaded in activeor pending clip player.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsClipLoadedActive",
						"code_hint": "Function IsClipLoadedActive(ClipName As String) As Boolean",
						"description": "Determines if given clip is loaded in active clip player.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsClipLoadedPending",
						"code_hint": "Function IsClipLoadedPending(ClipName As String) As Boolean",
						"description": "Determines if given clip is loaded in pending clip player.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsInterlaced",
						"code_hint": "Function IsInterlaced() As Boolean",
						"description": "Returns true if the clip is interlaced, false otherwise.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Pause",
						"code_hint": "Sub Pause()",
						"description": "Pauses the clip on this channel.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "PauseActive",
						"code_hint": "Sub PauseActive()",
						"description": "Pauses the active clip on this channel.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "PausePending",
						"code_hint": "Sub PausePending()",
						"description": "Pauses the pending clip on this channel.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Play",
						"code_hint": "Sub Play(StartFrame As Integer)",
						"description": "Start Playing from StartFrame position.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "PlayActive",
						"code_hint": "Sub PlayActive(StartFrame As Integer)",
						"description": "Start Playing the active clip player from StartFrame position.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "PlayPending",
						"code_hint": "Sub PlayPending(StartFrame As Integer)",
						"description": "Start Playing the pending clip player from StartFrame position.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "QueueDelete",
						"code_hint": "Sub QueueDelete(param_1 As Integer)",
						"description": "Deletes the clip from the given position in the queue.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "QueueFlush",
						"code_hint": "Sub QueueFlush()",
						"description": "Empties the complete clip queue.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "QueueInsert",
						"code_hint": "Sub QueueInsert([out] ClipName As String, [out] FrameIn As Integer, [out] FrameOut As Integer, [out] AutoStart As Boolean, [out] Position As Integer)",
						"description": "Inserts a clip at the given position in the queue.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "QueueList",
						"code_hint": "Function QueueList() As String",
						"description": "Returns the list of queued clip.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "QueueMove",
						"code_hint": "Sub QueueMove([out] Source As Integer, [out] Target As Integer)",
						"description": "Moves a clip from the given position to a new one in the queue.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "QueueReplace",
						"code_hint": "Sub QueueReplace([out] ClipName As String, [out] FrameIn As Integer, [out] FrameOut As Integer, [out] AutoStart As Boolean, [out] Position As Integer)",
						"description": "Replaces a clip at the given postion with the new one.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "RequestClipStatus",
						"code_hint": "Function RequestClipStatus() As String",
						"description": "Requests the clip channel to broadcast its status.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Scrub",
						"code_hint": "Sub Scrub(Frame As Integer)",
						"description": "Scrub the clip to Frame position.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ScrubActive",
						"code_hint": "Sub ScrubActive(Frame As Integer)",
						"description": "Scrub the active clip to Frame position.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ScrubPending",
						"code_hint": "Sub ScrubPending(Frame As Integer)",
						"description": "Scrub the pending clip to Frame position.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetClipName",
						"code_hint": "Sub SetClipName(ClipName As String)",
						"description": "Load ClipName into clip channel with FrameIn set to 0 and FrameOut set to cliplength. Respects AutoRun.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetClipNameBack2Back",
						"code_hint": "Sub SetClipNameBack2Back(ClipName As String)",
						"description": "Load ClipName as Back2Back into pending clip player with FrameIn set to 0 and FrameOut set to cliplength. Respects AutoRun.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetClipNameBack2BackEx",
						"code_hint": "Sub SetClipNameBack2BackEx(ClipName As String, FrameIn As Integer, FrameOut As Integer, AutoRun As Boolean)",
						"description": "Load ClipName as Back2Back into pending clip player with parameters in/out and AutoRun.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetClipNameEx",
						"code_hint": "Sub SetClipNameEx(ClipName As String, FrameIn As Integer, FrameOut As Integer, AutoRun As Boolean)",
						"description": "Load ClipName into clip channel with parameters in/out and AutoRun.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetClipNamePending",
						"code_hint": "Sub SetClipNamePending(ClipName As String)",
						"description": "Load ClipName into pending clip player with FrameIn set to 0 and FrameOut set to cliplength. Respects AutoRun.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetClipNamePendingEx",
						"code_hint": "Sub SetClipNamePendingEx(ClipName As String, FrameIn As Integer, FrameOut As Integer, AutoRun As Boolean)",
						"description": "Load ClipName into pending clip player with parameters in/out and AutoRun.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetFrameInOut",
						"code_hint": "Sub SetFrameInOut([out] In As Integer, [out] Out As Integer)",
						"description": "Set the In and Out frame.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetFrameInOutActive",
						"code_hint": "Sub SetFrameInOutActive([out] In As Integer, [out] Out As Integer)",
						"description": "Set the In and Out frame on the active clip player.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetFrameInOutPending",
						"code_hint": "Sub SetFrameInOutPending([out] In As Integer, [out] Out As Integer)",
						"description": "Set the In and Out frame on the pending clip player.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetNextCueIsInstant",
						"code_hint": "Sub SetNextCueIsInstant(param_1 As Boolean)",
						"description": "Cue command should be executed on the spot.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetRegisterChangedClipFrame",
						"code_hint": "Sub SetRegisterChangedClipFrame(ShmKey As String)",
						"description": "Causes ShmKey to be set to the current frame whenever it changes.An empty string removes the binding.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetRegisterChangedClipMode",
						"code_hint": "Sub SetRegisterChangedClipMode(ShmKey As String)",
						"description": "Causes ShmKey to be set to the new mode whenever it changes.An empty string removes the binding.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetRegisterChangedClipModePending",
						"code_hint": "Sub SetRegisterChangedClipModePending(ShmKey As String)",
						"description": "Causes ShmKey to be set to the new mode whenever it changes.An empty string removes the binding.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetRegisterChangedPlayerStatus",
						"code_hint": "Sub SetRegisterChangedPlayerStatus(ShmKey As String)",
						"description": "Causes ShmKey to be set to the new status whenever it changes.An empty string removes the binding.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Stop",
						"code_hint": "Sub Stop()",
						"description": "Stops the clip on this channel.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "StopActive",
						"code_hint": "Sub StopActive()",
						"description": "Stops the active clip on this channel.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "StopPending",
						"code_hint": "Sub StopPending()",
						"description": "Stops the pending clip on this channel.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SwapEofPending",
						"code_hint": "Sub SwapEofPending()",
						"description": "Activate pending clip at EOF of activ clip.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SwapPending",
						"code_hint": "Sub SwapPending()",
						"description": "Activate pending clip .",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Color",
				"descripton": "A color object consisting of 4 members: red, green blue, alpha.",
				"properties": [
					{
						"name": "Alpha",
						"code_hint": "Alpha As Double",
						"description": "The alpha component [0.0, 1.0]",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Alpha8",
						"code_hint": "Alpha8 As Integer",
						"description": "The alpha component in 8bit [0, 255]",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Blue",
						"code_hint": "Blue As Double",
						"description": "The blue component [0.0, 1.0]",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Blue8",
						"code_hint": "Blue8 As Integer",
						"description": "The blue component in 8bit [0, 255]",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Green",
						"code_hint": "Green As Double",
						"description": "The green component [0.0, 1.0]",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Green8",
						"code_hint": "Green8 As Integer",
						"description": "The green component in 8bit [0, 255]",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Red",
						"code_hint": "Red As Double",
						"description": "The red component [0.0, 1.0]",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Red8",
						"code_hint": "Red8 As Integer",
						"description": "The red component in 8bit [0, 255]",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Rgb",
						"code_hint": "Rgb As Vertex",
						"description": "The red/green/blue components combined into a Vertex value [0.0, 1.0]",
						"return_value": "Vertex",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "GetRGB",
						"code_hint": "Sub GetRGB([out] r As Double, [out] g As Double, [out] b As Double)",
						"description": "Gets the red, green and blue component [0.0, 1.0]",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetRGB8",
						"code_hint": "Sub GetRGB8([out] r As Integer, [out] g As Integer, [out] b As Integer)",
						"description": "Gets the red, green and blue component in 8bit [0, 255]",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetRGBA",
						"code_hint": "Sub GetRGBA([out] r As Double, [out] g As Double, [out] b As Double, [out] a As Double)",
						"description": "Gets the red, green, blue and alpha component [0.0, 1.0]",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetRGBA8",
						"code_hint": "Sub GetRGBA8([out] r As Integer, [out] g As Integer, [out] b As Integer, [out] a As Integer)",
						"description": "Gets the red, green, blue and alpha component in 8bit [0, 255]",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetRGB",
						"code_hint": "Sub SetRGB(r As Double, g As Double, b As Double)",
						"description": "Sets the red, green and blue component [0.0, 1.0]",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetRGB8",
						"code_hint": "Sub SetRGB8(r As Integer, g As Integer, b As Integer)",
						"description": "Sets the red, green and blue component in 8bit [0, 255]",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetRGBA",
						"code_hint": "Sub SetRGBA(r As Double, g As Double, b As Double, a As Double)",
						"description": "Sets the red, green, blue and alpha component [0.0, 1.0]",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetRGBA8",
						"code_hint": "Sub SetRGBA8(r As Integer, g As Integer, b As Integer, a As Integer)",
						"description": "Sets the red, green, blue and alpha component in 8bit [0, 255]",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Container",
				"descripton": "A container object.",
				"properties": [
					{
						"name": "Active",
						"code_hint": "Active As Boolean",
						"description": "The visibility state",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Alpha",
						"code_hint": "Alpha As Alpha",
						"description": "The alpha object",
						"return_value": "Alpha",
						"deprecated": "false"
					},
					{
						"name": "Center",
						"code_hint": "Center As Center",
						"description": "The center object",
						"return_value": "Center",
						"deprecated": "false"
					},
					{
						"name": "ChildContainer",
						"code_hint": "ChildContainer As Container [read-only]",
						"description": "The first child container",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "ChildContainerCount",
						"code_hint": "ChildContainerCount As Integer [read-only]",
						"description": "Gets the number of child containers.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "ExactPicking",
						"code_hint": "ExactPicking As Boolean",
						"description": "Enables/Disables exact picking for OnEnter/OnLeave.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Expert",
						"code_hint": "Expert As Expert",
						"description": "The expert object",
						"return_value": "Expert",
						"deprecated": "false"
					},
					{
						"name": "FirstChildContainer",
						"code_hint": "FirstChildContainer As Container [read-only]",
						"description": "The first child container",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "Geometry",
						"code_hint": "Geometry As Geometry",
						"description": "The geometry object",
						"return_value": "Geometry",
						"deprecated": "false"
					},
					{
						"name": "Glow",
						"code_hint": "Glow As Glow",
						"description": "The glow object",
						"return_value": "Glow",
						"deprecated": "false"
					},
					{
						"name": "HDR",
						"code_hint": "HDR As HDR",
						"description": "The HDR object",
						"return_value": "HDR",
						"deprecated": "false"
					},
					{
						"name": "InfoText",
						"code_hint": "InfoText As InfoText",
						"description": "The infotext object",
						"return_value": "InfoText",
						"deprecated": "false"
					},
					{
						"name": "Key",
						"code_hint": "Key As Key",
						"description": "The key object",
						"return_value": "Key",
						"deprecated": "false"
					},
					{
						"name": "LastChildContainer",
						"code_hint": "LastChildContainer As Container [read-only]",
						"description": "The last child container",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "Material",
						"code_hint": "Material As Material",
						"description": "The material object",
						"return_value": "Material",
						"deprecated": "false"
					},
					{
						"name": "Matrix",
						"code_hint": "Matrix As Matrix [read-only]",
						"description": "The model matrix of the cotainer.",
						"return_value": "Matrix",
						"deprecated": "false"
					},
					{
						"name": "Merged",
						"code_hint": "Merged As Boolean [read-only]",
						"description": "Indicates whether the container is merged.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MergedChildContainer",
						"code_hint": "MergedChildContainer As Container [read-only]",
						"description": "The first child container within a merged object",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "MergedParentContainer",
						"code_hint": "MergedParentContainer As Container [read-only]",
						"description": "The merged parent container",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "Name",
						"code_hint": "Name As String",
						"description": "The name of the container",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "NextContainer",
						"code_hint": "NextContainer As Container [read-only]",
						"description": "The next container in the tree",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "Open",
						"code_hint": "Open As Boolean",
						"description": "Indicates whether the container is open, i.e. its subcontainers are visible in the tree",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ParentContainer",
						"code_hint": "ParentContainer As Container [read-only]",
						"description": "The parent container",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "Position",
						"code_hint": "Position As Position",
						"description": "The position object",
						"return_value": "Position",
						"deprecated": "false"
					},
					{
						"name": "PreviousContainer",
						"code_hint": "PreviousContainer As Container [read-only]",
						"description": "The previous container",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "Rotation",
						"code_hint": "Rotation As Rotation",
						"description": "The rotation object",
						"return_value": "Rotation",
						"deprecated": "false"
					},
					{
						"name": "Scaling",
						"code_hint": "Scaling As Scaling",
						"description": "The scaling object",
						"return_value": "Scaling",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Script",
						"code_hint": "Script As Script [read-only]",
						"description": "The script object: it can be used to dynamically call member procedures of the container",
						"return_value": "Script",
						"deprecated": "false"
					},
					{
						"name": "ScriptPluginInstance",
						"code_hint": "ScriptPluginInstance As PluginInstance [read-only]",
						"description": "The script's plugin instance",
						"return_value": "PluginInstance",
						"deprecated": "false"
					},
					{
						"name": "ScriptSettings",
						"code_hint": "ScriptSettings As ScriptSettings [read-only]",
						"description": "The script's local settings",
						"return_value": "ScriptSettings",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Texture",
						"code_hint": "Texture As Texture",
						"description": "The texture object",
						"return_value": "Texture",
						"deprecated": "false"
					},
					{
						"name": "Uuid",
						"code_hint": "Uuid As Uuid [read-only]",
						"description": "The UUID of the container",
						"return_value": "Uuid",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "NumChildContainers",
						"code_hint": "NumChildContainers As Integer [read-only]",
						"description": "Deprecated. Use ChildContainerCount instead.",
						"return_value": "Integer",
						"deprecated": "true"
					},
					{
						"name": "Transform",
						"code_hint": "Transform As Transform",
						"description": "Deprecated.",
						"return_value": "Transform",
						"deprecated": "true"
					}
				],
				"methods": [
					{
						"name": "AddContainer",
						"code_hint": "Function AddContainer(where As Integer) As Container",
						"description": "Inserts and returns a new container; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "AddScreenOffset",
						"code_hint": "Function AddScreenOffset(dx As Integer, dy As Integer) As Vertex",
						"description": "This procedure is identical to ScreenOffsetToContainerOffset except that it automatically adds the resulting container offset to the local container position. This procedure is typically called in OnMouseMove to implement dragging of containers.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContainsMouseCursor",
						"code_hint": "Function ContainsMouseCursor() As Boolean",
						"description": "Returns true if and only if the mouse curser is inside the container. For this method to work correctly, it is required that at least one enter or leave callback be defined on the container or on a super-container.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CopyTo",
						"code_hint": "Function CopyTo(destination As Container, where As Integer) As Container",
						"description": "Copies the container; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "CreateAlpha",
						"code_hint": "Function CreateAlpha() As Alpha",
						"description": "Creates and returns an alpha object.",
						"return_value": "Alpha",
						"deprecated": "false"
					},
					{
						"name": "CreateExpert",
						"code_hint": "Function CreateExpert() As Expert",
						"description": "",
						"return_value": "Expert",
						"deprecated": "false"
					},
					{
						"name": "CreateFunction",
						"code_hint": "Function CreateFunction(location As String) As PluginInstance",
						"description": "Creates a plugin instance by name, e.g. \"BUILT_IN*FUNCTION*Autofollow\"",
						"return_value": "PluginInstance",
						"deprecated": "false"
					},
					{
						"name": "CreateGeometry",
						"code_hint": "Function CreateGeometry(location As String) As Geometry",
						"description": "Creates a geometry by name, e.g. \"BUILT_IN*GEOM*Circle\" (for built-ins) or \"GEOM*ObjectName\" (for pool objects)",
						"return_value": "Geometry",
						"deprecated": "false"
					},
					{
						"name": "CreateGeometryBGL",
						"code_hint": "Function CreateGeometryBGL(location As String) As Integer",
						"description": "Creates a geometry by name using background loading, e.g. \"BUILT_IN*GEOM*Circle\" (for built-ins) or \"GEOM*ObjectName\" (for pool objects)",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "CreateGlow",
						"code_hint": "Function CreateGlow() As Glow",
						"description": "",
						"return_value": "Glow",
						"deprecated": "false"
					},
					{
						"name": "CreateHDR",
						"code_hint": "Function CreateHDR() As HDR",
						"description": "",
						"return_value": "HDR",
						"deprecated": "false"
					},
					{
						"name": "CreateInfoText",
						"code_hint": "Function CreateInfoText() As InfoText",
						"description": "",
						"return_value": "InfoText",
						"deprecated": "false"
					},
					{
						"name": "CreateKey",
						"code_hint": "Function CreateKey() As Key",
						"description": "",
						"return_value": "Key",
						"deprecated": "false"
					},
					{
						"name": "CreateMaterial",
						"code_hint": "Function CreateMaterial() As Material",
						"description": "",
						"return_value": "Material",
						"deprecated": "false"
					},
					{
						"name": "CreateMaterial",
						"code_hint": "Function CreateMaterial(location As String) As Material",
						"description": "",
						"return_value": "Material",
						"deprecated": "false"
					},
					{
						"name": "CreateTexture",
						"code_hint": "Function CreateTexture(name As String) As Texture",
						"description": "Creates a texture object by name, e.g. \"IMAGE*ImageName\"",
						"return_value": "Texture",
						"deprecated": "false"
					},
					{
						"name": "CreateTexture",
						"code_hint": "Function CreateTexture(image As Image) As Texture",
						"description": "",
						"return_value": "Texture",
						"deprecated": "false"
					},
					{
						"name": "CreateTextureBGL",
						"code_hint": "Function CreateTextureBGL(name As String) As Integer",
						"description": "Creates a texture object by name using background loading, e.g. \"IMAGE*ImageName\"",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Delete",
						"code_hint": "Sub Delete()",
						"description": "Deletes the container.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "DeleteAlpha",
						"code_hint": "Sub DeleteAlpha()",
						"description": "Deletes the alpha object.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "DeleteChildren",
						"code_hint": "Sub DeleteChildren()",
						"description": "Deletes the container's child containers.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "DeleteExpert",
						"code_hint": "Sub DeleteExpert()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "DeleteFunction",
						"code_hint": "Sub DeleteFunction(location As String)",
						"description": "Deletes a plugin instance by name, e.g. \"Autofollow\"",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "DeleteGeometry",
						"code_hint": "Sub DeleteGeometry()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "DeleteGlow",
						"code_hint": "Sub DeleteGlow()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "DeleteHDR",
						"code_hint": "Sub DeleteHDR()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "DeleteInfoText",
						"code_hint": "Sub DeleteInfoText()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "DeleteKey",
						"code_hint": "Sub DeleteKey()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "DeleteMaterial",
						"code_hint": "Sub DeleteMaterial()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "DeleteTexture",
						"code_hint": "Sub DeleteTexture()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindSiblingSubContainer",
						"code_hint": "Function FindSiblingSubContainer(name As String) As Container",
						"description": "Searches among the container's siblings (as well as the container itself) and their sub-containers for a container with the specified name. Otherwise identical to FindSubContainer.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "FindSubContainer",
						"code_hint": "Function FindSubContainer(name As String) As Container",
						"description": "Searches for a sub-container with the specified name. The search mode is breadth-first. It's possible to combine multiple calls to this function into one call by concatenating the individual container names using $ as a separator. For example, FindSubContainer(\"name1$name2\") has the same effect as FindSubContainer(\"name1\").FindSubContainer(\"name2\").",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "FindSuperContainer",
						"code_hint": "Function FindSuperContainer(name As String) As Container",
						"description": "Searches for a super-container with the specified name.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "GetBoundingBox",
						"code_hint": "Sub GetBoundingBox(v1_out As Vertex, v2_out As Vertex)",
						"description": "Returns in v1_out and v2_out the left-bottom-back and right-top-front vertices of the container's bounding box.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetBoundingBoxDimensions",
						"code_hint": "Function GetBoundingBoxDimensions() As Vertex",
						"description": "Returns the dimensions (width, height, depth) of the container's bounding box. (The used bounding box was calculated in the last frame.)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetChildContainerByIndex",
						"code_hint": "Function GetChildContainerByIndex(index As Integer) As Container",
						"description": "Returns the child container specified by index.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "GetChildContainerContainingMouseCursor",
						"code_hint": "Function GetChildContainerContainingMouseCursor() As Container",
						"description": "Returns the first child container containing the mouse cursor.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "GetContainerAndSubContainers",
						"code_hint": "Sub GetContainerAndSubContainers([out] v As Array[Container], traverseMergedGeometries As Boolean)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetDirector",
						"code_hint": "Function GetDirector() As Director",
						"description": "Finds the first director containing an animation of this container.",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "GetDirectorOfMergedGeometry",
						"code_hint": "Function GetDirectorOfMergedGeometry() As Director",
						"description": "If this container holds a merged geometry with an embedded animation, this function returns the corresponding director.",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "GetFirstActiveChildContainer",
						"code_hint": "Function GetFirstActiveChildContainer() As Container",
						"description": "Returns the first (=topmost) active child container.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "GetFunctionPluginInstance",
						"code_hint": "Function GetFunctionPluginInstance(pluginName As String) As PluginInstance",
						"description": "Provides access to the parameters of a function plugin residing on the container.",
						"return_value": "PluginInstance",
						"deprecated": "false"
					},
					{
						"name": "GetFunctionPluginInstances",
						"code_hint": "Function GetFunctionPluginInstances([out] v As Array[PluginInstance]) As Integer",
						"description": "Fills the array v with all function plugininstances of this container.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetGeometryPluginInstance",
						"code_hint": "Function GetGeometryPluginInstance() As PluginInstance",
						"description": "Provides access to the parameters of a geometry plugin residing on the container.",
						"return_value": "PluginInstance",
						"deprecated": "false"
					},
					{
						"name": "GetIndexOfFirstActiveChildContainer",
						"code_hint": "Function GetIndexOfFirstActiveChildContainer() As Integer",
						"description": "Returns the 0-based index of the first active child container within the container (or -1 if there is no active child).",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetLocalIndex",
						"code_hint": "Function GetLocalIndex() As Integer",
						"description": "Returns the 0-based index of the container within its parent.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetScreenBounds",
						"code_hint": "Sub GetScreenBounds(v1_out As Vertex, v2_out As Vertex)",
						"description": "Returns in v1_out and v2_out the left-bottom and right-top screen coordinates defining the rectangle occupied by the container. (The used bounding box was calculated in the last frame.)",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetScreenBoundsProjectOnEditorResolution",
						"code_hint": "Sub GetScreenBoundsProjectOnEditorResolution(v1_out As Vertex, v2_out As Vertex)",
						"description": "Returns in v1_out and v2_out the left-bottom and right-top screen coordinates defining the rectangle occupied by the container. (The used bounding box was calculated in the last frame.)The bounding box projection is forced against the editor resolution. This makes a difference in case of halfheight rendering.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetScreenPointToGeomSurface",
						"code_hint": "Function GetScreenPointToGeomSurface(x As Integer, y As Integer, pos As Vertex) As Boolean",
						"description": "This procedure calculates the geometry intersection with the projected ray from the specified screen position and returns true on success. The intersection point is returned in world coordinates.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetScreenPositionOrtho",
						"code_hint": "Function GetScreenPositionOrtho(x As Integer, y As Integer) As Boolean",
						"description": "This procedure gets the container's screen position for orthogonal objects.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetScreenSizeOrtho",
						"code_hint": "Function GetScreenSizeOrtho(x As Integer, y As Integer) As Boolean",
						"description": "This procedure gets the container's screen size in the same way as you can do it via GUI in the Transformation Editor. There can't be any rotation on the object.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetShaderPluginInstance",
						"code_hint": "Function GetShaderPluginInstance() As PluginInstance",
						"description": "Provides access to the parameters of a shader plugin residing on the container.",
						"return_value": "PluginInstance",
						"deprecated": "false"
					},
					{
						"name": "GetTransformedBoundingBox",
						"code_hint": "Sub GetTransformedBoundingBox(v1_out As Vertex, v2_out As Vertex)",
						"description": "Returns in v1_out and v2_out the left-bottom-back and right-top-front vertices of the container's bounding box with applied transformation matrix.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetTransformedBoundingBoxDimensions",
						"code_hint": "Function GetTransformedBoundingBoxDimensions() As Vertex",
						"description": "Returns the dimensions (width, height, depth) of the container's bounding box with applied transformation matrix. (The used bounding box was calculated in the last frame.)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "GetUVCoordinatesOfScreenPoint",
						"code_hint": "Function GetUVCoordinatesOfScreenPoint(x As Integer, y As Integer) As Vertex",
						"description": "Transforms (x, y) into (u, v) coordinates that are relative to the x/y cross section of the container's bounding box. The (u, v) coordinates are returned in the x and y components of the returned vertex (the z coordinate is always 0.0). If (x, y) are within the bounding-box area, u and v will be within the range [0.0, 1.0].",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "HideAllChildContainers",
						"code_hint": "Sub HideAllChildContainers()",
						"description": "Makes all child containers invisible.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsOnTop",
						"code_hint": "Function IsOnTop() As Boolean",
						"description": "Returns true if and only if the container is on top at the mouse cursor position. For this procedure to work correctly, it is required that at least one enter or leave callback be defined on the container or on a super-container.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsScreenPointInBoundingBox",
						"code_hint": "Function IsScreenPointInBoundingBox(x As Integer, y As Integer) As Boolean",
						"description": "Returns true if the screen point (x, y) is inside the area covered by the container's bounding box. (The used bounding box was calculated in the last frame.)",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsVertexInBoundingBox",
						"code_hint": "Function IsVertexInBoundingBox(v As Vertex) As Boolean",
						"description": "Returns true if v (which must be specified in world coordinates) is inside the container's bounding box. (The used bounding box was calculated in the last frame.)",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "LocalPosToScreenPos",
						"code_hint": "Sub LocalPosToScreenPos(pos As Vertex, [out] dX As Double, [out] dY As Double)",
						"description": "Converts local position to the position on the screen.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "LocalPosToWorldPos",
						"code_hint": "Function LocalPosToWorldPos(pos As Vertex) As Vertex",
						"description": "Converts the local position to a world coordinate space position.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "MoveAllChannelsToDirector",
						"code_hint": "Sub MoveAllChannelsToDirector(director As Director)",
						"description": "Moves the animation channels to the specified director.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "MoveAllChannelsToDirector",
						"code_hint": "Sub MoveAllChannelsToDirector(dest As Director, root As Director)",
						"description": "Moves the animation channels to the specified director and rebuilds the director hierarchy starting from the specified ancestor.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "MoveTo",
						"code_hint": "Function MoveTo(destination As Container, where As Integer) As Container",
						"description": "Moves the container; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "MoveToKeepTransformation",
						"code_hint": "Function MoveToKeepTransformation(destination As Container, where As Integer) As Container",
						"description": "Moves the container preserving the containers transformation; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "RecomputeMatrix",
						"code_hint": "Sub RecomputeMatrix()",
						"description": "Recalculate transformation matrix of the container. This function is useful if you can't wait one field for the updated matrix. Use it carefully and only where it is really needed (current transformation matrix, transformed bounding box, screen-position or screen-size)",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ScreenAbsoluteOffsetToLocalPlaneXYOffset",
						"code_hint": "Function ScreenAbsoluteOffsetToLocalPlaneXYOffset(dXOld As Double, dYOld As Double, dXNew As Double, dYNew As Double, [out] pos As Vertex) As Boolean",
						"description": "Converts the screen offset to a offset on the local object plane. This would mean if you add the returned vertex to the local container's position then it moves exactly to the passed screenposition (on the object plane). With the ability to define start- and stoppoint you can do accurate movements of non-orthogonal objects as well (in contrary to ScreenOffsetToLocalPlaneXYOffset). The function returns true on success.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ScreenAbsoluteOffsetToLocalPlaneXZOffset",
						"code_hint": "Function ScreenAbsoluteOffsetToLocalPlaneXZOffset(dXOld As Double, dYOld As Double, dXNew As Double, dYNew As Double, [out] pos As Vertex) As Boolean",
						"description": "Same as ScreenOffsetToLocalPlaneXYOffset but on the XZ plane.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ScreenAbsoluteOffsetToLocalPlaneYZOffset",
						"code_hint": "Function ScreenAbsoluteOffsetToLocalPlaneYZOffset(dXOld As Double, dYOld As Double, dXNew As Double, dYNew As Double, [out] pos As Vertex) As Boolean",
						"description": "Same as ScreenOffsetToLocalPlaneXYOffset but on the YZ plane.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ScreenOffsetToContainerOffset",
						"code_hint": "Function ScreenOffsetToContainerOffset(dx As Integer, dy As Integer) As Vertex",
						"description": "Transforms a pixel offset into the corresponding offset in local container coordinates. In other words, the vector returned by this procedure is the vector you need to add to the container's local position (i.e. Position.Xyz) in order to make the container move (dx, dy) pixels on the screen.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenOffsetToLocalPlaneXYOffset",
						"code_hint": "Function ScreenOffsetToLocalPlaneXYOffset(dX As Double, dY As Double, [out] pos As Vertex) As Boolean",
						"description": "Converts the screen offset to a offset on the local object plane. This would mean if you add the returned vertex to the local container's position then it moves exactly to the passed screenposition (on the object plane). The function returns true on success.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ScreenOffsetToLocalPlaneXZOffset",
						"code_hint": "Function ScreenOffsetToLocalPlaneXZOffset(dX As Double, dY As Double, [out] pos As Vertex) As Boolean",
						"description": "Same as ScreenOffsetToLocalPlaneXYOffset but on the XZ plane.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ScreenOffsetToLocalPlaneYZOffset",
						"code_hint": "Function ScreenOffsetToLocalPlaneYZOffset(dX As Double, dY As Double, [out] pos As Vertex) As Boolean",
						"description": "Same as ScreenOffsetToLocalPlaneXYOffset but on the YZ plane.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ScreenPosToLocalGrid",
						"code_hint": "Function ScreenPosToLocalGrid(dX As Double, dY As Double) As Vertex",
						"description": "Converts the screen position to current grid intersection point. The returned coordinates are in local container coordinate space.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenPosToLocalPlaneXY",
						"code_hint": "Function ScreenPosToLocalPlaneXY(dX As Double, dY As Double, [out] pos As Vertex) As Boolean",
						"description": "Converts the screen position to a position on the local object plane. This would mean if you assign the returned vertex to the local container's position then it moves exactly to the passed screenposition (on the object plane). The function returns true on success.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ScreenPosToLocalPlaneXZ",
						"code_hint": "Function ScreenPosToLocalPlaneXZ(dX As Double, dY As Double, [out] pos As Vertex) As Boolean",
						"description": "Same as ScreenPosToLocalPlaneXY but on the XZ plane.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ScreenPosToLocalPlaneYZ",
						"code_hint": "Function ScreenPosToLocalPlaneYZ(dX As Double, dY As Double, [out] pos As Vertex) As Boolean",
						"description": "Same as ScreenPosToLocalPlaneXY but on the YZ plane.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ScreenPosToLocalPos",
						"code_hint": "Function ScreenPosToLocalPos(dX As Double, dY As Double) As Vertex",
						"description": "Converts the screen position to the local container position. This would mean that if you assign the returned vertex to the local container's position then it moves exactly to the passed screen position (orthogonal to camera).",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "SetCenterPositionLocked",
						"code_hint": "Sub SetCenterPositionLocked(center As Vertex)",
						"description": "This procedure sets the container's center point without affecting its position.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetCenterScreenGridPositionLocked",
						"code_hint": "Sub SetCenterScreenGridPositionLocked(dX As Double, dY As Double)",
						"description": "This procedure sets the container's center point to the passed screen position, using the current grid, without affecting the container position.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetCenterScreenPositionLocked",
						"code_hint": "Sub SetCenterScreenPositionLocked(dX As Double, dY As Double)",
						"description": "This procedure sets the container's center point to the passed screen position without affecting the container position.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetScreenPositionOrtho",
						"code_hint": "Function SetScreenPositionOrtho(x As Integer, y As Integer) As Boolean",
						"description": "This procedure sets the container's screen position for orthogonal objects.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetScreenSizeOrtho",
						"code_hint": "Function SetScreenSizeOrtho(x As Integer, y As Integer) As Boolean",
						"description": "This procedure sets the container's screen size in the same way as you can do it via GUI in the Transformation Editor.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ShowAllChildContainers",
						"code_hint": "Sub ShowAllChildContainers()",
						"description": "Makes all child containers visible.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ShowOneChildContainer",
						"code_hint": "Sub ShowOneChildContainer(index As Integer)",
						"description": "Makes the child container specified by index visible and all other child containers invisible.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Update",
						"code_hint": "Sub Update()",
						"description": "Redraws the container's entry in the scene tree GUI. Ignored in on-air mode.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "WorldPosToLocalPos",
						"code_hint": "Function WorldPosToLocalPos(pos As Vertex) As Vertex",
						"description": "Converts the world position to a local coordinate space position.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenOffsetToWorldOffset",
						"code_hint": "Function ScreenOffsetToWorldOffset(dx As Integer, dy As Integer) As Vertex",
						"description": "Deprecated.",
						"return_value": "Vertex",
						"deprecated": "true"
					}
				]
			},
			{
				"name": "DateTime",
				"descripton": "A type storing date/time information.",
				"properties": [
					{
						"name": "DayOfMonth",
						"code_hint": "DayOfMonth As Integer",
						"description": "Day of month (1-31)",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "DayOfWeek",
						"code_hint": "DayOfWeek As Integer",
						"description": "Day of week (0-6; Sunday = 0)",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "DayOfYear",
						"code_hint": "DayOfYear As Integer",
						"description": "Day of year (0-365)",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Hour",
						"code_hint": "Hour As Integer",
						"description": "Hours after midnight (0-23)",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Minute",
						"code_hint": "Minute As Integer",
						"description": "Minutes after hour (0-59)",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Month",
						"code_hint": "Month As Integer",
						"description": "Month (1-12)",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Second",
						"code_hint": "Second As Integer",
						"description": "Seconds after minute (0-59)",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "TotalSeconds",
						"code_hint": "TotalSeconds As Integer",
						"description": "",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Year",
						"code_hint": "Year As Integer",
						"description": "Year",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "Normalize",
						"code_hint": "Sub Normalize()",
						"description": "Computes DayOfWeek and DayOfYear members and forces the other members to standard ranges.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ToString",
						"code_hint": "Function ToString() As String",
						"description": "Returns a date+time string of the form Wed Jan 02 02:03:55 1980.",
						"return_value": "String",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Director",
				"descripton": "A director in the stage.",
				"properties": [
					{
						"name": "ActionChannelCount",
						"code_hint": "ActionChannelCount As Integer [read-only]",
						"description": "Gets the number of action channels.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ChildDirector",
						"code_hint": "ChildDirector As Director [read-only]",
						"description": "The topmost child director",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "EventChannel",
						"code_hint": "EventChannel As Channel [read-only]",
						"description": "Gets the event channel.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Field",
						"code_hint": "Field As Integer [read-only]",
						"description": "The director field",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Name",
						"code_hint": "Name As String",
						"description": "The name of the director",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "NextDirector",
						"code_hint": "NextDirector As Director [read-only]",
						"description": "The next director in the stage tree",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "Offset",
						"code_hint": "Offset As Double",
						"description": "The offset of the director (wrt to the parent director)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ParentDirector",
						"code_hint": "ParentDirector As Director [read-only]",
						"description": "The parent director",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "PreviousDirector",
						"code_hint": "PreviousDirector As Director [read-only]",
						"description": "The previous director in the stage tree",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "Reverse",
						"code_hint": "Reverse As Boolean",
						"description": "Enables/Disables reverse playing.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Time",
						"code_hint": "Time As Double",
						"description": "The director time",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "TotalOffset",
						"code_hint": "TotalOffset As Double [read-only]",
						"description": "The sum of all offsets (of this director and its parents)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "NumActionChannels",
						"code_hint": "NumActionChannels As Integer [read-only]",
						"description": "Deprecated. Use ActionChannelCount.",
						"return_value": "Integer",
						"deprecated": "true"
					},
					{
						"name": "NumAnimationChannels",
						"code_hint": "NumAnimationChannels As Integer [read-only]",
						"description": "Deprecated. Call GetAnimationChannels to get a list of animation channels.",
						"return_value": "Integer",
						"deprecated": "true"
					}
				],
				"methods": [
					{
						"name": "AddDirector",
						"code_hint": "Function AddDirector(where As Integer) As Director",
						"description": "Inserts a new director; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "ContinueAnimation",
						"code_hint": "Sub ContinueAnimation()",
						"description": "Continues the animation.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ContinueAnimationReverse",
						"code_hint": "Sub ContinueAnimationReverse()",
						"description": "Continues the animation in reverse direction.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "CopyTo",
						"code_hint": "Function CopyTo(destination As Director, where As Integer) As Director",
						"description": "Copies a director; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "Delete",
						"code_hint": "Sub Delete()",
						"description": "Removes this director from the stage.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "FindActionChannel",
						"code_hint": "Function FindActionChannel(channelName As String) As Channel",
						"description": "Searches for an action channel named channelName.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindChannel",
						"code_hint": "Function FindChannel(channelName As String) As Channel",
						"description": "Searches for an animation channel named channelName.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframe",
						"code_hint": "Function FindKeyframe(keyframeName As String) As Keyframe",
						"description": "Searches for a keyframe named keyframeName.",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindSubDirector",
						"code_hint": "Function FindSubDirector(name As String) As Director",
						"description": "Searches for a sub-director named name.",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "GetActionChannel",
						"code_hint": "Function GetActionChannel(index As Integer) As Channel",
						"description": "Returns the action channel at index.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetAnimationChannels",
						"code_hint": "Sub GetAnimationChannels([out] v As Array[Channel])",
						"description": "Fills the specified array with the director's animation channels.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetKeyframes",
						"code_hint": "Sub GetKeyframes([out] v As Array[Keyframe])",
						"description": "Fills the specified array with the director's keyframes.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GoTo",
						"code_hint": "Sub GoTo(stopA As String, stopB As String)",
						"description": "Animate from stop a to b. (stops could be defined as: ${keyframename}, CURRENT (time), F{framenumber}, T{timecode} or a {floating point value} (time))",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GoToRel",
						"code_hint": "Sub GoToRel(stopA As String, stopB As String)",
						"description": "Animate from stop a to b relative to the director offset. (stops could be defined as: ${keyframename}, CURRENT (time), F{framenumber}, T{timecode} or a {floating point value} (time))",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GoToTrio",
						"code_hint": "Sub GoToTrio(stopA As String, stopB As String)",
						"description": "Animate from stop a to b according to the Trio rules. (stops could be defined as: ${keyframename}, CURRENT (time), F{framenumber}, T{timecode} or a {floating point value} (time))",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "HasAnimationChannels",
						"code_hint": "Function HasAnimationChannels() As Boolean",
						"description": "Determines whether this director contains any animation channels (not counting channels in sub-directors).",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsAnimationRunning",
						"code_hint": "Function IsAnimationRunning() As Boolean",
						"description": "Returns true if the animation of this director is active.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MoveTo",
						"code_hint": "Sub MoveTo(destination As Director, where As Integer)",
						"description": "Moves a director; where =\nTL_NEXT\nTL_PREVIOUS\nTL_DOWN",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Show",
						"code_hint": "Sub Show(time As Double)",
						"description": "Sets director time.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "StartAnimation",
						"code_hint": "Sub StartAnimation()",
						"description": "Starts the animation in this director and its sub-directors.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "StartAnimationReverse",
						"code_hint": "Sub StartAnimationReverse()",
						"description": "Starts the animation in this director and its sub-directors in reverse direction.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "StopAnimation",
						"code_hint": "Sub StopAnimation()",
						"description": "Stops the animation of this director and its sub-directors.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "StopAnimation",
						"code_hint": "Sub StopAnimation(recursive As Boolean)",
						"description": "Stops the animation of this director and, optionally, its sub-directors.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetAnimationChannel",
						"code_hint": "Function GetAnimationChannel(index As Integer) As Channel",
						"description": "Deprecated. Use GetAnimationChannels instead.",
						"return_value": "Channel",
						"deprecated": "true"
					}
				]
			},
			{
				"name": "Double",
				"descripton": "A double precision floating-point number (64 bits).",
				"properties": [],
				"methods": []
			},
			{
				"name": "Eventpool",
				"descripton": "This type provides access to system-wide event pool.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "emitEvent",
						"code_hint": "Sub emitEvent(eventname As String, arguments As StringMap)",
						"description": "Emits the given event, sends arguments as keymap-value for optional event arguments. The objectname is derived from the sender (see registerEvents call).",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "registerAsListener",
						"code_hint": "Sub registerAsListener(objectname As String, eventname As String)",
						"description": "Registers this script as listener for the given event (objectname, event). Callback method OnEvent(objectname, event, arguments) will be called when the event is triggered.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "registerEvents",
						"code_hint": "Sub registerEvents(objectname As String, eventnames As Array[String])",
						"description": "Registers the array of events for the given objectname as available events. Other scripts/objects can now register to them and will be notified when an event is triggered. Must be only called once.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "unregisterAsListener",
						"code_hint": "Sub unregisterAsListener(objectname As String, eventname As String)",
						"description": "Unregisters this script as listener for the given event (objectname, event).",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Expert",
				"descripton": "A container's Expert property. This type provides access to the parameters of the Expert plugin.",
				"properties": [
					{
						"name": "BackFace",
						"code_hint": "BackFace As Boolean",
						"description": "Get/Set back face rendering.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "ExactPicking",
						"code_hint": "ExactPicking As Boolean",
						"description": "Get/Set exact picking mode.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "LineAntialiasing",
						"code_hint": "LineAntialiasing As Boolean",
						"description": "Get/Set line antialiasing.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Mirror",
						"code_hint": "Mirror As Integer",
						"description": "Get/Set mirror mode. Possible settings are:\nEXPERT_MIRROR_NONE\nEXPERT_MIRROR_X\nEXPERT_MIRROR_Y\nEXPERT_MIRROR_Z",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Outline",
						"code_hint": "Outline As Boolean",
						"description": "Get/Set outline rendering.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "RenderMode",
						"code_hint": "RenderMode As Integer",
						"description": "Get/Set render mode. Possible settings are:\nEXPERT_RENDER_ADD\nEXPERT_RENDER_BLEND\nEXPERT_RENDER_REV_SUBTRACT\nEXPERT_RENDER_SUBTRACT\nEXPERT_RENDER_MULTIPLY\nEXPERT_RENDER_REV_MULTIPLY",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "SeparateSpecular",
						"code_hint": "SeparateSpecular As Boolean",
						"description": "Get/Set separate specular rendering.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ShadeModel",
						"code_hint": "ShadeModel As Integer",
						"description": "Get/Set shading model. Possible modes are:\nEXPERT_SHADE_FLAT\nEXPERT_SHADE_SMOOTH",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "TransparancyMode",
						"code_hint": "TransparancyMode As Integer",
						"description": "Get/Set transparancy mode. Possible settings are:\nEXPERT_TRANSP_BLEND\nEXPERT_TRANSP_MASK\nEXPERT_TRANSP_FASTEST\nEXPERT_TRANSP_HIGH_QUALITY",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "TwoSidedLighting",
						"code_hint": "TwoSidedLighting As Boolean",
						"description": "Get/Set two-sided lighting.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Wireframe",
						"code_hint": "Wireframe As Boolean",
						"description": "Get/Set drawing in wireframe mode.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "WireframeWidth",
						"code_hint": "WireframeWidth As Double",
						"description": "Get/Set line width in wireframe mode (typically ranges from 0.0 to 10.0).",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ZBuffer",
						"code_hint": "ZBuffer As Boolean",
						"description": "Get/Set drawing of Z-Buffer.",
						"return_value": "Boolean",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Geometry",
				"descripton": "A container's geometry. Depending on whether the geometry is a plugin or a text, this type provides access to the parameters of the plugin or the text.",
				"properties": [
					{
						"name": "Active",
						"code_hint": "Active As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Direction",
						"code_hint": "Direction As Integer",
						"description": "The text direction:\nTEXT_DIRECTION_LEFT_TO_RIGHT\nTEXT_DIRECTION_RIGHT_TO_LEFT\nTEXT_DIRECTION_TOP_TO_BOTTOM\nTEXT_DIRECTION_BOTTOM_TO_TOP",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Kerning",
						"code_hint": "Kerning As Double",
						"description": "The kerning value",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "LineSpacing",
						"code_hint": "LineSpacing As Double",
						"description": "The line spacing",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Name",
						"code_hint": "Name As String [read-only]",
						"description": "The name of the geometry",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Orientation",
						"code_hint": "Orientation As Integer",
						"description": "The text orientation:\nTEXT_ORIENTATION_LEFT\nTEXT_ORIENTATION_RIGHT\nTEXT_ORIENTATION_CENTER\nTEXT_ORIENTATION_CHAR",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PluginInstance",
						"code_hint": "PluginInstance As PluginInstance [read-only]",
						"description": "Gets the geometry's plugin data (if this is a geometry plugin).",
						"return_value": "PluginInstance",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Text",
						"code_hint": "Text As String",
						"description": "The text string (if this is a text geometry)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Uuid",
						"code_hint": "Uuid As Uuid [read-only]",
						"description": "The UUID of the geometry",
						"return_value": "Uuid",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VerticalOrientation",
						"code_hint": "VerticalOrientation As Integer",
						"description": "The vertical text orientation:\nTEXT_ORIENTATION_VERTICAL_TOP\nTEXT_ORIENTATION_VERTICAL_BOTTOM\nTEXT_ORIENTATION_VERTICAL_CENTER\nTEXT_ORIENTATION_VERTICAL_FIRST_LINE",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "WordSpacing",
						"code_hint": "WordSpacing As Double",
						"description": "The word spacing",
						"return_value": "Double",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetParameterBool",
						"code_hint": "Function GetParameterBool(parName As String) As Boolean",
						"description": "Gets a geometry parameter of type Boolean.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetParameterColor",
						"code_hint": "Function GetParameterColor(parName As String) As Color",
						"description": "Gets a geometry parameter of type Color.",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "GetParameterContainer",
						"code_hint": "Function GetParameterContainer(parName As String) As Container",
						"description": "Gets a geometry parameter of type Container.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "GetParameterDouble",
						"code_hint": "Function GetParameterDouble(parName As String) As Double",
						"description": "Gets a geometry parameter of type Double.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "GetParameterInt",
						"code_hint": "Function GetParameterInt(parName As String) As Integer",
						"description": "Gets a geometry parameter of type Integer.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetParameterString",
						"code_hint": "Function GetParameterString(parName As String) As String",
						"description": "Gets a geometry parameter of type String.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "RegisterChangedCallback",
						"code_hint": "Sub RegisterChangedCallback()",
						"description": "Causes OnGeometryChanged to be invoked whenever the geometry changes.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "RegisterTextChangedCallback",
						"code_hint": "Sub RegisterTextChangedCallback()",
						"description": "Causes OnGeometryChanged to be invoked whenever the geometry's text changes.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetParameterBool",
						"code_hint": "Sub SetParameterBool(parName As String, v As Boolean)",
						"description": "Sets a geometry parameter of type Boolean.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetParameterColor",
						"code_hint": "Sub SetParameterColor(parName As String, v As Color)",
						"description": "Sets a geometry parameter of type Color.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetParameterContainer",
						"code_hint": "Sub SetParameterContainer(parName As String, v As Container)",
						"description": "Sets a geometry parameter of type Container.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetParameterDouble",
						"code_hint": "Sub SetParameterDouble(parName As String, v As Double)",
						"description": "Sets a geometry parameter of type Double.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetParameterInt",
						"code_hint": "Sub SetParameterInt(parName As String, v As Integer)",
						"description": "Sets a geometry parameter of type Integer.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetParameterString",
						"code_hint": "Sub SetParameterString(parName As String, v As String)",
						"description": "Sets a geometry parameter of type String.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "UnregisterChangedCallback",
						"code_hint": "Sub UnregisterChangedCallback()",
						"description": "Removes the binding set up by RegisterChangedCallback.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Gesture",
				"descripton": "Holds data of a single gesture event.",
				"properties": [
					{
						"name": "Event",
						"code_hint": "Event As Integer [read-only]",
						"description": "Returns the gesture event type (GESTURE_MANIPULATION_START, GESTURE_MANIPULATION_STOP, GESTURE_MOMENTUM_START, GESTURE_MOMENTUM_STOP, GESTURE_TAP, GESTURE_DOUBLE_TAP, GESTURE_TAP_HOLD, GESTURE_TRANSFORMATION, GESTURE_PATTERN).",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PatternId",
						"code_hint": "PatternId As Integer [read-only]",
						"description": "Returns the Id of the recognized gesture pattern (PATTERN_INVALID, PATTERN_RIGHT, PATTERN_LEFT, PATTERN_UP, PATTERN_DOWN, PATTERN_CIRCLE, PATTERN_SQUARE, PATTERN_TRIANGLE)",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Pressure",
						"code_hint": "Pressure As Double [read-only]",
						"description": "Returns the normalized pressure value in the range 0.0 to 1.0.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Recognizer",
						"code_hint": "Recognizer As GestureRecognizer [read-only]",
						"description": "Returns the recognizer which generated this gesture.",
						"return_value": "GestureRecognizer",
						"deprecated": "false"
					},
					{
						"name": "TraceCount",
						"code_hint": "TraceCount As Integer [read-only]",
						"description": "Returns the number of traces involved in this gesture.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "xy",
						"code_hint": "xy As Vertex [read-only]",
						"description": "Returns the gesture position in screen-coordinates.",
						"return_value": "Vertex",
						"deprecated": "false"
					}
				],
				"methods": []
			},
			{
				"name": "GestureRecognizer",
				"descripton": "Controls gesture recognition.",
				"properties": [
					{
						"name": "Active",
						"code_hint": "Active As Boolean",
						"description": "Activates or deactivates recognition.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CheckPatternOrientation",
						"code_hint": "CheckPatternOrientation As Boolean",
						"description": "Gets or sets gesture pattern orientation checking.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "HandlePatterns",
						"code_hint": "HandlePatterns As Boolean",
						"description": "Gets or sets gesture pattern handling.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "HandleTaps",
						"code_hint": "HandleTaps As Boolean",
						"description": "Gets or sets tap handling.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "AddHandler",
						"code_hint": "Sub AddHandler(base As Base)",
						"description": "Adds an event handler (PluginInstance).",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "AddTrace",
						"code_hint": "Sub AddTrace(trace As Trace)",
						"description": "Adds a trace to the gesture recognizer.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "RemoveHandler",
						"code_hint": "Sub RemoveHandler(base As Base)",
						"description": "Removes an event handler (PluginInstance).",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "RemoveTrace",
						"code_hint": "Sub RemoveTrace(trace As Trace)",
						"description": "Removes a trace from the gesture recognizer.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "GfxChannel",
				"descripton": "Graphics-channel objects",
				"properties": [
					{
						"name": "Alpha",
						"code_hint": "Alpha As Double",
						"description": "(Inherited from AVChannel) Alpha of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Center",
						"code_hint": "Center As Vertex",
						"description": "(Inherited from AVChannel) Transformation center of this AVChannel",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentBorderColor",
						"code_hint": "ContentBorderColor As Color",
						"description": "(Inherited from AVChannel) AVChannel content border color",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "ContentCenter",
						"code_hint": "ContentCenter As Vertex",
						"description": "(Inherited from AVChannel) AVChannel content relative center in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentCropBottom",
						"code_hint": "ContentCropBottom As Integer",
						"description": "(Inherited from AVChannel) AVChannel content bottom crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropLeft",
						"code_hint": "ContentCropLeft As Integer",
						"description": "(Inherited from AVChannel) AVChannel content left crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropRight",
						"code_hint": "ContentCropRight As Integer",
						"description": "(Inherited from AVChannel) AVChannel content right crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropTop",
						"code_hint": "ContentCropTop As Integer",
						"description": "(Inherited from AVChannel) AVChannel content top crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentPosition",
						"code_hint": "ContentPosition As Vertex",
						"description": "(Inherited from AVChannel) AVChannel content relative position in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentSize",
						"code_hint": "ContentSize As Vertex",
						"description": "(Inherited from AVChannel) AVChannel content relative size in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentZoomMode",
						"code_hint": "ContentZoomMode As Integer",
						"description": "(Inherited from AVChannel) AVChannel content zoom mode",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ControlledAnimation",
						"code_hint": "ControlledAnimation As Boolean",
						"description": "(Inherited from AVChannel) Is animation controlled by parent Scene or by this AVChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CropBottom",
						"code_hint": "CropBottom As Double",
						"description": "(Inherited from AVChannel) Bottom crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropLeft",
						"code_hint": "CropLeft As Double",
						"description": "(Inherited from AVChannel) Left crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropRight",
						"code_hint": "CropRight As Double",
						"description": "(Inherited from AVChannel) Right crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropTop",
						"code_hint": "CropTop As Double",
						"description": "(Inherited from AVChannel) Top crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CurrentCamera",
						"code_hint": "CurrentCamera As Integer",
						"description": "Current set camera of this GFXChannel",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ForceKey",
						"code_hint": "ForceKey As Boolean",
						"description": "(Inherited from AVChannel) Force key of this AVChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "KeepAspect",
						"code_hint": "KeepAspect As Boolean",
						"description": "(Inherited from AVChannel) Keep aspect of this AVChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "LocalScene",
						"code_hint": "LocalScene As Scene",
						"description": "Set local Scene by Scene object",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "MasterVolume",
						"code_hint": "MasterVolume As Double",
						"description": "(Inherited from AVChannel) Master volume of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Position",
						"code_hint": "Position As Vertex",
						"description": "(Inherited from AVChannel) Position of this AVChannel",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenCenter",
						"code_hint": "ScreenCenter As Vertex",
						"description": "(Inherited from AVChannel) Transformation center of this AVChannel (in Pixels)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropBottom",
						"code_hint": "ScreenCropBottom As Double",
						"description": "(Inherited from AVChannel) Bottom crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropLeft",
						"code_hint": "ScreenCropLeft As Double",
						"description": "(Inherited from AVChannel) Left crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropRight",
						"code_hint": "ScreenCropRight As Double",
						"description": "(Inherited from AVChannel) Right crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropTop",
						"code_hint": "ScreenCropTop As Double",
						"description": "(Inherited from AVChannel) Top crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenPosition",
						"code_hint": "ScreenPosition As Vertex",
						"description": "(Inherited from AVChannel) Position of this AVChannel (in Pixels)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenSize",
						"code_hint": "ScreenSize As Vertex",
						"description": "(Inherited from AVChannel) Size of this AVChannel (in Pixels)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Size",
						"code_hint": "Size As Vertex",
						"description": "(Inherited from AVChannel) Size of this AVChannel",
						"return_value": "Vertex",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "GetAudioChannelVolume",
						"code_hint": "Function GetAudioChannelVolume(param_1 As Integer) As Double",
						"description": "(Inherited from AVChannel) Volume of audio channel (up to 16 channels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "IsValid",
						"code_hint": "Function IsValid() As Boolean",
						"description": "Is this a valid GFXChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsValid",
						"code_hint": "Function IsValid() As Boolean",
						"description": "(Inherited from AVChannel) Checks if this AVChannel is valid",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetAudioChannelVolume",
						"code_hint": "Function SetAudioChannelVolume(param_1 As Integer) As Double",
						"description": "(Inherited from AVChannel) Volume of audio channel (up to 16 channels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "SetObject",
						"code_hint": "Sub SetObject(param_1 As String)",
						"description": "Set local Scene by location (UUID)",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Glow",
				"descripton": "A container's Glow property. This type provides access to the parameters of the Glow plugin.",
				"properties": [
					{
						"name": "BlurWidth",
						"code_hint": "BlurWidth As Double",
						"description": "Get/Set blur width.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Color",
						"code_hint": "Color As Color",
						"description": "Get/Set color.",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "DrawTexture",
						"code_hint": "DrawTexture As Boolean",
						"description": "Get/Set texture drawing active state.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "ObjectStrength",
						"code_hint": "ObjectStrength As Double",
						"description": "Get/Set object strength.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "Strength",
						"code_hint": "Strength As Double",
						"description": "Get/Set glow strength.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Textured",
						"code_hint": "Textured As Boolean",
						"description": "Get/Set textured mode active state.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "TextureUnit",
						"code_hint": "TextureUnit As Integer",
						"description": "Get/Set texture unit.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "UseColor",
						"code_hint": "UseColor As Boolean",
						"description": "Get/Set use of color.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Grid",
				"descripton": "A grid object.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Locked",
						"code_hint": "Locked As Boolean",
						"description": "Gets or sets grid lock.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Type",
						"code_hint": "Type As Integer",
						"description": "Gets or sets the grid type. Possible types are:\nGRID_TYPE_XY\nGRID_TYPE_XZ\nGRID_TYPE_ZY\nGRID_TYPE_FREE\nGRID_TYPE_NONE",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MoveToContainer",
						"code_hint": "Sub MoveToContainer(container As Container)",
						"description": "Moves grid to the specified container and aligns it.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "HDR",
				"descripton": "A container's HDR property. This type provides access to the parameters of the HDR plugin.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Image",
				"descripton": "An image object. This is used to retrieve an image's properties.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Name",
						"code_hint": "Name As String [read-only]",
						"description": "The name of the image",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Uuid",
						"code_hint": "Uuid As Uuid [read-only]",
						"description": "The UUID of the image",
						"return_value": "Uuid",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "ImageChannel",
				"descripton": "Image-channel objects",
				"properties": [
					{
						"name": "Alpha",
						"code_hint": "Alpha As Double",
						"description": "(Inherited from AVChannel) Alpha of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Center",
						"code_hint": "Center As Vertex",
						"description": "(Inherited from AVChannel) Transformation center of this AVChannel",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentBorderColor",
						"code_hint": "ContentBorderColor As Color",
						"description": "(Inherited from AVChannel) AVChannel content border color",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "ContentCenter",
						"code_hint": "ContentCenter As Vertex",
						"description": "(Inherited from AVChannel) AVChannel content relative center in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentCropBottom",
						"code_hint": "ContentCropBottom As Integer",
						"description": "(Inherited from AVChannel) AVChannel content bottom crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropLeft",
						"code_hint": "ContentCropLeft As Integer",
						"description": "(Inherited from AVChannel) AVChannel content left crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropRight",
						"code_hint": "ContentCropRight As Integer",
						"description": "(Inherited from AVChannel) AVChannel content right crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropTop",
						"code_hint": "ContentCropTop As Integer",
						"description": "(Inherited from AVChannel) AVChannel content top crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentPosition",
						"code_hint": "ContentPosition As Vertex",
						"description": "(Inherited from AVChannel) AVChannel content relative position in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentSize",
						"code_hint": "ContentSize As Vertex",
						"description": "(Inherited from AVChannel) AVChannel content relative size in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentZoomMode",
						"code_hint": "ContentZoomMode As Integer",
						"description": "(Inherited from AVChannel) AVChannel content zoom mode",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ControlledAnimation",
						"code_hint": "ControlledAnimation As Boolean",
						"description": "(Inherited from AVChannel) Is animation controlled by parent Scene or by this AVChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CropBottom",
						"code_hint": "CropBottom As Double",
						"description": "(Inherited from AVChannel) Bottom crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropLeft",
						"code_hint": "CropLeft As Double",
						"description": "(Inherited from AVChannel) Left crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropRight",
						"code_hint": "CropRight As Double",
						"description": "(Inherited from AVChannel) Right crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropTop",
						"code_hint": "CropTop As Double",
						"description": "(Inherited from AVChannel) Top crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ForceKey",
						"code_hint": "ForceKey As Boolean",
						"description": "(Inherited from AVChannel) Force key of this AVChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "KeepAspect",
						"code_hint": "KeepAspect As Boolean",
						"description": "(Inherited from AVChannel) Keep aspect of this AVChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MasterVolume",
						"code_hint": "MasterVolume As Double",
						"description": "(Inherited from AVChannel) Master volume of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Position",
						"code_hint": "Position As Vertex",
						"description": "(Inherited from AVChannel) Position of this AVChannel",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenCenter",
						"code_hint": "ScreenCenter As Vertex",
						"description": "(Inherited from AVChannel) Transformation center of this AVChannel (in Pixels)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropBottom",
						"code_hint": "ScreenCropBottom As Double",
						"description": "(Inherited from AVChannel) Bottom crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropLeft",
						"code_hint": "ScreenCropLeft As Double",
						"description": "(Inherited from AVChannel) Left crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropRight",
						"code_hint": "ScreenCropRight As Double",
						"description": "(Inherited from AVChannel) Right crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropTop",
						"code_hint": "ScreenCropTop As Double",
						"description": "(Inherited from AVChannel) Top crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenPosition",
						"code_hint": "ScreenPosition As Vertex",
						"description": "(Inherited from AVChannel) Position of this AVChannel (in Pixels)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenSize",
						"code_hint": "ScreenSize As Vertex",
						"description": "(Inherited from AVChannel) Size of this AVChannel (in Pixels)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Size",
						"code_hint": "Size As Vertex",
						"description": "(Inherited from AVChannel) Size of this AVChannel",
						"return_value": "Vertex",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "GetAudioChannelVolume",
						"code_hint": "Function GetAudioChannelVolume(param_1 As Integer) As Double",
						"description": "(Inherited from AVChannel) Volume of audio channel (up to 16 channels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "IsValid",
						"code_hint": "Function IsValid() As Boolean",
						"description": "Is this a valid ImageChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsValid",
						"code_hint": "Function IsValid() As Boolean",
						"description": "(Inherited from AVChannel) Checks if this AVChannel is valid",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetAudioChannelVolume",
						"code_hint": "Function SetAudioChannelVolume(param_1 As Integer) As Double",
						"description": "(Inherited from AVChannel) Volume of audio channel (up to 16 channels)",
						"return_value": "Double",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "InfoText",
				"descripton": "A container's InfoText property. This type provides access to the parameters of the InfoText plugin.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Text",
						"code_hint": "Text As String",
						"description": "Get/Set info text.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Integer",
				"descripton": "A 32-bit signed integer.",
				"properties": [],
				"methods": []
			},
			{
				"name": "Key",
				"descripton": "A key object. This is used to control a container's key object.",
				"properties": [
					{
						"name": "Active",
						"code_hint": "Active As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "AlphaValue",
						"code_hint": "AlphaValue As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "AutoAlpha",
						"code_hint": "AutoAlpha As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "DrawKey",
						"code_hint": "DrawKey As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "DrawRGB",
						"code_hint": "DrawRGB As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Keyframe",
				"descripton": "An animation keyframe.",
				"properties": [
					{
						"name": "ActionString",
						"code_hint": "ActionString As String",
						"description": "Gets or sets the command string of an action keyframe.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "BoolValue",
						"code_hint": "BoolValue As Boolean",
						"description": "Gets or sets the value of a boolean keyframe.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Channel",
						"code_hint": "Channel As Channel [read-only]",
						"description": "Gets the channel that contains this keyframe.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "ColorValue",
						"code_hint": "ColorValue As Color",
						"description": "Gets or sets the value of a color keyframe.",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "EventDirection",
						"code_hint": "EventDirection As Integer",
						"description": "Get or sets the direction of an event keyframe. Possible values are: ED_BOTH, ED_NORMAL, ED_REVERSE",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "EventDuration",
						"code_hint": "EventDuration As Double",
						"description": "Get or sets the duration of an event keyframe (in seconds).",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "EventValue",
						"code_hint": "EventValue As Integer",
						"description": "Get or sets the type of an event keyframe. Possible values are: ET_STOP, ET_LOCAL_STOP, ET_TAG.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "FloatValue",
						"code_hint": "FloatValue As Double",
						"description": "Gets or sets the value of a float keyframe.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "IntValue",
						"code_hint": "IntValue As Integer",
						"description": "Gets or sets the value of an integer keyframe.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Locked",
						"code_hint": "Locked As Boolean",
						"description": "Gets or sets the locked status of a path point keyframe.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MaterialValue",
						"code_hint": "MaterialValue As Material [read-only]",
						"description": "Gets or sets the value of a material keyframe.",
						"return_value": "Material",
						"deprecated": "false"
					},
					{
						"name": "Name",
						"code_hint": "Name As String",
						"description": "Gets or sets the keyframe's name.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "NextKeyframe",
						"code_hint": "NextKeyframe As Keyframe [read-only]",
						"description": "Gets the next keyframe.",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "NumberOfAxes",
						"code_hint": "NumberOfAxes As Integer [read-only]",
						"description": "Returns the number of spline axes.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PathHandle",
						"code_hint": "PathHandle As BezierHandle [read-only]",
						"description": "Gets the associated path handle if this is a position keyframe. If not, Null is returned.",
						"return_value": "BezierHandle",
						"deprecated": "false"
					},
					{
						"name": "PreviousKeyframe",
						"code_hint": "PreviousKeyframe As Keyframe [read-only]",
						"description": "Gets the previous keyframe.",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Time",
						"code_hint": "Time As Double",
						"description": "Gets or sets the keyframe's time (in seconds).",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "XyzValue",
						"code_hint": "XyzValue As Vertex",
						"description": "Gets or sets the value of a a rotation or scaling keyframe or a path point keyframe.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "NumAxes",
						"code_hint": "NumAxes As Integer [read-only]",
						"description": "Deprecated. Use NumberOfAxes.",
						"return_value": "Integer",
						"deprecated": "true"
					}
				],
				"methods": [
					{
						"name": "Delete",
						"code_hint": "Function Delete() As Boolean",
						"description": "Deletes the keyframe.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetBezierHandle",
						"code_hint": "Function GetBezierHandle(axis As Integer) As BezierHandle",
						"description": "Returns the bezier handle for the specified axis. The axis parameter is only used if the keyframe has multiple splines, which is the case for rotation, scaling, and material keyframes. When called on a position keyframe, this procedure returns the handle for the distance spline. To get the path handle, use the PathHandle property instead.",
						"return_value": "BezierHandle",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "UpdateAnimation",
						"code_hint": "Sub UpdateAnimation()",
						"description": "Update animation to reflect changes to keyframe. (This update isn't performed in OnAir mode where the update is done as soon as the animation is started.)",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Light",
				"descripton": "A light object. Light objects are returned by the Scene's GetLight member.",
				"properties": [
					{
						"name": "Attenuation",
						"code_hint": "Attenuation As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Color",
						"code_hint": "Color As Color",
						"description": "",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "Direction",
						"code_hint": "Direction As Rotation",
						"description": "",
						"return_value": "Rotation",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Position",
						"code_hint": "Position As Position",
						"description": "",
						"return_value": "Position",
						"deprecated": "false"
					},
					{
						"name": "PositionTrackingActive",
						"code_hint": "PositionTrackingActive As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "PositionTrackingContainer",
						"code_hint": "PositionTrackingContainer As Container",
						"description": "",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "RotationTrackingActive",
						"code_hint": "RotationTrackingActive As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "RotationTrackingContainer",
						"code_hint": "RotationTrackingContainer As Container",
						"description": "",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Type",
						"code_hint": "Type As Integer",
						"description": "The light type:\nLIGHT_TYPE_LOCAL\nLIGHT_TYPE_SPOT\nLIGHT_TYPE_INFINITE",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ResetPositionTracking",
						"code_hint": "Sub ResetPositionTracking()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ResetRotationTracking",
						"code_hint": "Sub ResetRotationTracking()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "LiveChannel",
				"descripton": "A LiveChannel object. The LiveChannel member of the Base type provides access to the live channel. Use System.GetLiveChannel(number as Integer), whereas number >= 0, to get a LiveChannel instance. See also examples section LiveChannel.",
				"properties": [
					{
						"name": "Alpha",
						"code_hint": "Alpha As Double",
						"description": "Get/Set the Alpha value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropBottom",
						"code_hint": "CropBottom As Double",
						"description": "Get/Set the Crop Bottom value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropLeft",
						"code_hint": "CropLeft As Double",
						"description": "Get/Set the Crop Left value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropRight",
						"code_hint": "CropRight As Double",
						"description": "Get/Set the Crop Right value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropTop",
						"code_hint": "CropTop As Double",
						"description": "Get/Set the Crop Top value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Height",
						"code_hint": "Height As Double",
						"description": "Get/Set the Height value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "LiveChannelID",
						"code_hint": "LiveChannelID As Integer [read-only]",
						"description": "Get the live channel number.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "MasterVolume",
						"code_hint": "MasterVolume As Double",
						"description": "Get/Set the MasterVolume value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "PosX",
						"code_hint": "PosX As Double",
						"description": "Get/Set the Position X value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "PosY",
						"code_hint": "PosY As Double",
						"description": "Get/Set the Position Y value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Width",
						"code_hint": "Width As Double",
						"description": "Get/Set the Width value for the channel.",
						"return_value": "Double",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Material",
				"descripton": "A material object. This is used to control a container's material.",
				"properties": [
					{
						"name": "Alpha",
						"code_hint": "Alpha As Double",
						"description": "The alpha value [0.0, 1.0]",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Alpha8",
						"code_hint": "Alpha8 As Integer",
						"description": "The alpha value in 8bit [0, 255]",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Ambient",
						"code_hint": "Ambient As Color",
						"description": "The ambient color",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "Color",
						"code_hint": "Color As Color",
						"description": "The color",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "Diffuse",
						"code_hint": "Diffuse As Color",
						"description": "The diffuse color",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "Emission",
						"code_hint": "Emission As Color",
						"description": "The emission color",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Lit",
						"code_hint": "Lit As Boolean",
						"description": "Controls whether lighting is enabled.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Shininess",
						"code_hint": "Shininess As Double",
						"description": "The shininess [0.0, 1.0]",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Specular",
						"code_hint": "Specular As Color",
						"description": "The specular color",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Matrix",
				"descripton": "A 4x4 matrix. The index operator [] can be used to access individual entries, with indices 0, 1, 2, 3 referring to the entries of the first column, 4, 5, 6, 7 to the second, etc.",
				"properties": [],
				"methods": [
					{
						"name": "Frustum",
						"code_hint": "Sub Frustum(left As Double, right As Double, bottom As Double, top As Double, near As Double, far As Double)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetDeterminant",
						"code_hint": "Function GetDeterminant() As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "GetRotation",
						"code_hint": "Function GetRotation() As Vertex",
						"description": "",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "GetRotationXYZ",
						"code_hint": "Function GetRotationXYZ(v As Vertex, v2 As Vertex) As Boolean",
						"description": "This function can be used to retrieve the rotations used by a container. The return value is true if two solutions for the x, y and z rotation were found. If the return value is false, the solution is undefined (x rotation is either 90 or 270 degrees).",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetRotationZXY",
						"code_hint": "Function GetRotationZXY(v As Vertex, v2 As Vertex) As Boolean",
						"description": "This function can be used to retrieve the rotations used by a camera. The return value is true if two solutions for the x, y and z rotation were found. If the return value is false, the solution is undefined (x rotation is either 90 or 270 degrees).",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetScaling",
						"code_hint": "Function GetScaling() As Vertex",
						"description": "",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "GetScaling2",
						"code_hint": "Function GetScaling2() As Vertex",
						"description": "Returns the squared scaling factors.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "GetTranslation",
						"code_hint": "Function GetTranslation() As Vertex",
						"description": "",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Invert",
						"code_hint": "Function Invert() As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "LoadIdentity",
						"code_hint": "Sub LoadIdentity()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "LoadMatrix",
						"code_hint": "Sub LoadMatrix()",
						"description": "Performs a glLoadMatrix().",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "MultMatrix",
						"code_hint": "Sub MultMatrix()",
						"description": "Performs a glMultMatrix().",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Ortho",
						"code_hint": "Sub Ortho(left As Double, right As Double, bottom As Double, top As Double, near As Double, far As Double)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Perspective",
						"code_hint": "Sub Perspective(fov As Double, aspect As Double, near As Double, far As Double)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Rotate",
						"code_hint": "Sub Rotate(angle As Double, v As Vertex)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Rotate",
						"code_hint": "Sub Rotate(v As Vertex)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "RotateX",
						"code_hint": "Sub RotateX(angle As Double)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "RotateY",
						"code_hint": "Sub RotateY(angle As Double)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "RotateZ",
						"code_hint": "Sub RotateZ(angle As Double)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Scale",
						"code_hint": "Sub Scale(v As Vertex)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Translate",
						"code_hint": "Sub Translate(v As Vertex)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Transpose",
						"code_hint": "Sub Transpose()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "PluginInstance",
				"descripton": "This type provides access to the parameters of geometry or function plugin. Objects of this type are returned by members of Geometry and Container.",
				"properties": [
					{
						"name": "Active",
						"code_hint": "Active As Boolean",
						"description": "Gets or sets the plugin instance's active state.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "DOFEventDistribution",
						"code_hint": "DOFEventDistribution As Boolean",
						"description": "Distribute DOF events to other plugin instances (default) or fire them only on the local instance.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "HitContainer",
						"code_hint": "HitContainer As Container [read-only]",
						"description": "Returns the last hit container.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "MTAlignGrid",
						"code_hint": "MTAlignGrid As Boolean",
						"description": "Gets or sets grid alignment on or off (default).",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MTDOFEventDistribution",
						"code_hint": "MTDOFEventDistribution As Boolean",
						"description": "Distribute multi-touch DOF events to other plugin instances (default) or fire them only on the local instance.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MTGrid",
						"code_hint": "MTGrid As Grid",
						"description": "Gets or sets the grid for the current plugin instance.",
						"return_value": "Grid",
						"deprecated": "false"
					},
					{
						"name": "MTHasMomentum",
						"code_hint": "MTHasMomentum As Boolean [read-only]",
						"description": "Is true if the PluginInstance is receiving multi-touch momentum updates.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MTObjectPlane",
						"code_hint": "MTObjectPlane As Integer",
						"description": "Gets or sets coordinate plane (XY) projection.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "MTRegistered",
						"code_hint": "MTRegistered As Boolean [read-only]",
						"description": "Is true if a control type was already registered for the current plugin instance.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MTTouched",
						"code_hint": "MTTouched As Boolean [read-only]",
						"description": "Is true if the Container is touched.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MTUseCenter",
						"code_hint": "MTUseCenter As Boolean",
						"description": "Gets or sets automatic center shift on (default) or off.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "PluginName",
						"code_hint": "PluginName As String [read-only]",
						"description": "Gets the plugin name.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Script",
						"code_hint": "Script As Script [read-only]",
						"description": "Provides dynamic access to the script functions of the plugin instance. (This only makes sense for scripted plugins.)",
						"return_value": "Script",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "TraceCount",
						"code_hint": "TraceCount As Integer [read-only]",
						"description": "Gets the current number of traces acting on this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetParameterBool",
						"code_hint": "Function GetParameterBool(parName As String) As Boolean",
						"description": "Gets a parameter value of type Boolean.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetParameterColor",
						"code_hint": "Function GetParameterColor(parName As String) As Color",
						"description": "Gets a parameter value of type Color.",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "GetParameterContainer",
						"code_hint": "Function GetParameterContainer(parName As String) As Container",
						"description": "Gets a parameter value of type Container.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "GetParameterDouble",
						"code_hint": "Function GetParameterDouble(parName As String) As Double",
						"description": "Gets a parameter value of type Double.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "GetParameterInt",
						"code_hint": "Function GetParameterInt(parName As String) As Integer",
						"description": "Gets a parameter value of type Integer.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetParameterString",
						"code_hint": "Function GetParameterString(parName As String) As String",
						"description": "Gets a parameter value of type string.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MTRegister",
						"code_hint": "Sub MTRegister(stroke As Integer, controlType As Integer)",
						"description": "Registers a control for a certain stroke in the multitouch core. Control types:\nMT_CONTROL_BUTTON\nMT_CONTROL_PZR2D\nMT_CONTROL_PZR2D_TILT",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "MTRegisterEx",
						"code_hint": "Sub MTRegisterEx(stroke As Integer, controlType As Integer, params As Array[Double])",
						"description": "Same as MTRegister but with the additional possibility to set parameters for the specified control. E.g.:\ndim params as array[double]\nparams.push(0) 'lock x\nparams.push(0) 'lock y\nparams.push(0) 'lock position\nparams.push(0) 'lock rotation\nparams.push(0) 'lock scale\nparams.push(1) 'momentum\nparams.push(0.027) 'friction coefficient (here: steel on ice)\nscriptplugininstance.MTRegisterEx(stroke, MT_CONTROL_PZR2D, params)",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "MTSetPosition",
						"code_hint": "Sub MTSetPosition(x As Integer, y As Integer)",
						"description": "Sets the position of the container",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "MTUnregister",
						"code_hint": "Sub MTUnregister()",
						"description": "Unregisters a control in the multitouch core.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "PushButton",
						"code_hint": "Sub PushButton(parName As String)",
						"description": "Calls the OnExecAction handler of the push button identified by parName.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetParameterBool",
						"code_hint": "Sub SetParameterBool(parName As String, v As Boolean)",
						"description": "Sets a parameter value of type Boolean.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetParameterColor",
						"code_hint": "Sub SetParameterColor(parName As String, v As Color)",
						"description": "Sets a parameter value of type Color.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetParameterContainer",
						"code_hint": "Sub SetParameterContainer(parName As String, v As Container)",
						"description": "Sets a parameter value of type Container",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetParameterDouble",
						"code_hint": "Sub SetParameterDouble(parName As String, v As Double)",
						"description": "Sets a parameter value of type Double.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetParameterInt",
						"code_hint": "Sub SetParameterInt(parName As String, v As Integer)",
						"description": "Sets a parameter value of type Integer.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetParameterString",
						"code_hint": "Sub SetParameterString(parName As String, v As String)",
						"description": "Sets a parameter value of type Dtring.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Position",
				"descripton": "A position object. This is used to control the position of a container, camera, or light.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "x",
						"code_hint": "x As Double",
						"description": "Gets or sets the x component.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "xyz",
						"code_hint": "xyz As Vertex",
						"description": "Gets or sets the x, y, z components combined into a vertex.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "y",
						"code_hint": "y As Double",
						"description": "Gets or sets the y component.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "z",
						"code_hint": "z As Double",
						"description": "Gets or sets the z component.",
						"return_value": "Double",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "ProxyChannel",
				"descripton": "Proxy-channel objects act as a placeholder for other channel types like Live, Clip, Stream, Gfx, ...",
				"properties": [
					{
						"name": "Alpha",
						"code_hint": "Alpha As Double",
						"description": "ProxyChannel alpha value",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "AudioVolume",
						"code_hint": "AudioVolume As Double",
						"description": "ProxyChannel audio volume",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Center",
						"code_hint": "Center As Vertex",
						"description": "ProxyChannel center in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentBorderColor",
						"code_hint": "ContentBorderColor As Color",
						"description": "ProxyChannel content border color",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "ContentCenter",
						"code_hint": "ContentCenter As Vertex",
						"description": "ProxyChannel content relative center in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentCropBottom",
						"code_hint": "ContentCropBottom As Integer",
						"description": "ProxyChannel content bottom crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropLeft",
						"code_hint": "ContentCropLeft As Integer",
						"description": "ProxyChannel content left crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropRight",
						"code_hint": "ContentCropRight As Integer",
						"description": "ProxyChannel content right crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropTop",
						"code_hint": "ContentCropTop As Integer",
						"description": "ProxyChannel content top crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentPosition",
						"code_hint": "ContentPosition As Vertex",
						"description": "ProxyChannel content relative position in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentSize",
						"code_hint": "ContentSize As Vertex",
						"description": "ProxyChannel content relative size in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentZoomMode",
						"code_hint": "ContentZoomMode As Integer",
						"description": "ProxyChannel content zoom mode",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "CropBottom",
						"code_hint": "CropBottom As Integer",
						"description": "ProxyChannel bottom crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "CropLeft",
						"code_hint": "CropLeft As Integer",
						"description": "ProxyChannel left crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "CropRight",
						"code_hint": "CropRight As Integer",
						"description": "ProxyChannel right crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "CropTop",
						"code_hint": "CropTop As Integer",
						"description": "ProxyChannel top crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Position",
						"code_hint": "Position As Vertex",
						"description": "ProxyChannel relative position in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Size",
						"code_hint": "Size As Vertex",
						"description": "ProxyChannel center in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "GetWrappedChannelType",
						"code_hint": "Function GetWrappedChannelType() As String",
						"description": "Returns the type of the wrapped channel object",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetWrappedChannelVizId",
						"code_hint": "Function GetWrappedChannelVizId() As Integer",
						"description": "Returns the internal id of the wrapped channel object",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsValid",
						"code_hint": "Function IsValid() As Boolean",
						"description": "Is this a valid ProxyChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetObject",
						"code_hint": "Function SetObject(param_1 As String) As Boolean",
						"description": "Sets a new object into the channel",
						"return_value": "Boolean",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Rotation",
				"descripton": "A rotation object. This is used to control the position of a container or light.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "x",
						"code_hint": "x As Double",
						"description": "Gets or sets the x component.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "xyz",
						"code_hint": "xyz As Vertex",
						"description": "Gets or sets the x, y, z components combined into a vertex.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "y",
						"code_hint": "y As Double",
						"description": "Gets or sets the y component.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "z",
						"code_hint": "z As Double",
						"description": "Gets or sets the z component.",
						"return_value": "Double",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Scaling",
				"descripton": "A scaling object. This is used to control the scaling of a container.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "x",
						"code_hint": "x As Double",
						"description": "Gets or sets the x component.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "xyz",
						"code_hint": "xyz As Vertex",
						"description": "Gets or sets the x, y, z components combined into a vertex.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "y",
						"code_hint": "y As Double",
						"description": "Gets or sets the y component.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "z",
						"code_hint": "z As Double",
						"description": "Gets or sets the z component.",
						"return_value": "Double",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Scene",
				"descripton": "A scene object. The Scene member of the Base type provides access to the current scene.",
				"properties": [
					{
						"name": "AlphaClearValue",
						"code_hint": "AlphaClearValue As Integer",
						"description": "",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "AutoKeyActive",
						"code_hint": "AutoKeyActive As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "AutoKeyPosition",
						"code_hint": "AutoKeyPosition As Vertex",
						"description": "",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "BackgroundColor",
						"code_hint": "BackgroundColor As Color",
						"description": "",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "CurrentCamera",
						"code_hint": "CurrentCamera As Camera [read-only]",
						"description": "The current camera",
						"return_value": "Camera",
						"deprecated": "false"
					},
					{
						"name": "CurrentCameraIndex",
						"code_hint": "CurrentCameraIndex As Integer",
						"description": "The index of the current camera",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Location",
						"code_hint": "Location As String [read-only]",
						"description": "The location of the scene",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "LocationPath",
						"code_hint": "LocationPath As String [read-only]",
						"description": "The full db location of the scene",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Map",
						"code_hint": "Map As SharedMemory [read-only]",
						"description": "The scene's memory map, used for data sharing within a scene.",
						"return_value": "SharedMemory",
						"deprecated": "false"
					},
					{
						"name": "Name",
						"code_hint": "Name As String [read-only]",
						"description": "The name of the scene",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "RootContainer",
						"code_hint": "RootContainer As Container [read-only]",
						"description": "The topmost container in the scene tree",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Script",
						"code_hint": "Script As Script [read-only]",
						"description": "The script object: it can be used used to dynamically call member procedures of the scene",
						"return_value": "Script",
						"deprecated": "false"
					},
					{
						"name": "ScriptPluginInstance",
						"code_hint": "ScriptPluginInstance As PluginInstance [read-only]",
						"description": "The script's plugin instance",
						"return_value": "PluginInstance",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Uuid",
						"code_hint": "Uuid As Uuid [read-only]",
						"description": "The UUID of the scene",
						"return_value": "Uuid",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "AddLogMessage",
						"code_hint": "Sub AddLogMessage(message As String)",
						"description": "Adds a log message to the scene log.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "CreateRootContainer",
						"code_hint": "Function CreateRootContainer() As Container",
						"description": "",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "DeformScreenPos",
						"code_hint": "Function DeformScreenPos([out] dX As Double, [out] dY As Double) As Boolean",
						"description": "Applies the lens deformation to the passed screen coordinates.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindContainer",
						"code_hint": "Function FindContainer(name As String) As Container",
						"description": "Searches the scene tree for a container named name. The search mode is breadth-first. It's possible to combine a call to this function and multiple calls to Container.FindSubContainer into a single call by concatenating the individual container names using $ as a separator. For example, scene.FindContainer(\"name1$name2\") has the same effect as scene.FindContainer(\"name1\").FindSubContainer(\"name2\").",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetCamera",
						"code_hint": "Function GetCamera(cameraIndex As Integer) As Camera",
						"description": "",
						"return_value": "Camera",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetGfxChannel",
						"code_hint": "Function GetGfxChannel(param_1 As Integer) As GfxChannel",
						"description": "Gets the GfxChannel n, where n is a zero based index",
						"return_value": "GfxChannel",
						"deprecated": "false"
					},
					{
						"name": "GetGrid",
						"code_hint": "Function GetGrid(gridNumber As Integer) As Grid",
						"description": "Gets a grid from the scene.",
						"return_value": "Grid",
						"deprecated": "false"
					},
					{
						"name": "GetImageChannel",
						"code_hint": "Function GetImageChannel(param_1 As Integer) As ImageChannel",
						"description": "Gets the ImageChannel n, where n is a zero based index",
						"return_value": "ImageChannel",
						"deprecated": "false"
					},
					{
						"name": "GetLight",
						"code_hint": "Function GetLight(lightIndex As Integer) As Light",
						"description": "",
						"return_value": "Light",
						"deprecated": "false"
					},
					{
						"name": "GetScenePluginInstance",
						"code_hint": "Function GetScenePluginInstance(pluginName As String) As PluginInstance",
						"description": "Provides access to the parameters of a scene plugin instance.",
						"return_value": "PluginInstance",
						"deprecated": "false"
					},
					{
						"name": "GetSuperChannel",
						"code_hint": "Function GetSuperChannel(param_1 As Integer) As SuperChannel",
						"description": "Gets the Super Channel n, where n is a zero based index",
						"return_value": "SuperChannel",
						"deprecated": "false"
					},
					{
						"name": "GetUnlockedGrid",
						"code_hint": "Function GetUnlockedGrid() As Grid",
						"description": "Gets the next unused grid from the scene.",
						"return_value": "Grid",
						"deprecated": "false"
					},
					{
						"name": "GetVbiChannel",
						"code_hint": "Function GetVbiChannel() As String",
						"description": "Gets the VBI channel used for capturing",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetVbiChannelList",
						"code_hint": "Function GetVbiChannelList() As String",
						"description": "Gets a list of possible VBI channels used for capturing",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetVideoChannel",
						"code_hint": "Function GetVideoChannel(channel_id As Integer) As AVChannel",
						"description": "Return AVChannel according to the provided channel_id",
						"return_value": "AVChannel",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsBacklayer",
						"code_hint": "Function IsBacklayer() As Boolean",
						"description": "Returns true, if the script is executed within Backlayer",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsFrontlayer",
						"code_hint": "Function IsFrontlayer() As Boolean",
						"description": "Returns true, if the script is executed within Frontlayer",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsMainlayer",
						"code_hint": "Function IsMainlayer() As Boolean",
						"description": "Returns true, if the script is executed within Mainlayer",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ScreenPosToWorldGrid",
						"code_hint": "Function ScreenPosToWorldGrid(dX As Double, dY As Double) As Vertex",
						"description": "Converts the screen position to current grid intersection point.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenPosToWorldPos",
						"code_hint": "Function ScreenPosToWorldPos(dX As Double, dY As Double) As Vertex",
						"description": "Converts the screen position to the world position.\nThis would mean that if you assign the returned vertex to a container (on root level no parent containers) position then it moves exactly to the passed screen position (orthogonal to camera).",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetGrid",
						"code_hint": "Function SetGrid(gridNumber As Integer) As Boolean",
						"description": "Sets the current scene grid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetVbiChannel",
						"code_hint": "Sub SetVbiChannel(vbiChannel As String)",
						"description": "Sets the VBI channel used for capturing",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "UndeformScreenPos",
						"code_hint": "Function UndeformScreenPos([out] dX As Double, [out] dY As Double) As Boolean",
						"description": "Applies the inverse lens deformation to the passed screen coordinates.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "UpdateSceneTree",
						"code_hint": "Sub UpdateSceneTree()",
						"description": "In authoring mode, this method causes the scene tree GUI to be rebuilt. Ignored in on-air mode.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "WorldPosToScreenPos",
						"code_hint": "Sub WorldPosToScreenPos(pos As Vertex, [out] dX As Double, [out] dY As Double)",
						"description": "Converts the world position to the position on the screen.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Script",
				"descripton": "The container's script object. This is used to dynamically call member procedures of another container.",
				"properties": [],
				"methods": []
			},
			{
				"name": "ScriptSettings",
				"descripton": "A script's local settings.",
				"properties": [
					{
						"name": "CallButtonDownForTopObjectsOnly",
						"code_hint": "CallButtonDownForTopObjectsOnly As Boolean",
						"description": "If set to true, the OnXButtonDown procedures are called only if the container contains the mouse cursor and is on top at the mouse cursor position. Default = true.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CallEnterLeaveForTopObjectsOnly",
						"code_hint": "CallEnterLeaveForTopObjectsOnly As Boolean",
						"description": "If set to true, OnEnter/OnLeave/OnEnterSubContainer/OnLeaveSubContainer is called only if the container is on top at the mouse cursor position. Default = true.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CallMouseMoveForTopObjectsOnly",
						"code_hint": "CallMouseMoveForTopObjectsOnly As Boolean",
						"description": "If set to true, OnMouseMove is called only if the container contains the mouse cursor and is on top at the mouse cursor position. Default = false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CallEnterLeaveForBackgroundObjects",
						"code_hint": "CallEnterLeaveForBackgroundObjects As Boolean",
						"description": "Deprecated. Use CallEnterLeaveForTopObjectsOnly instead.",
						"return_value": "Boolean",
						"deprecated": "true"
					},
					{
						"name": "CallMouseMoveForBackgroundObjects",
						"code_hint": "CallMouseMoveForBackgroundObjects As Boolean",
						"description": "Deprecated. Use CallMouseMoveForTopObjectsOnly instead.",
						"return_value": "Boolean",
						"deprecated": "true"
					}
				],
				"methods": []
			},
			{
				"name": "SharedMemory",
				"descripton": "A storage object that holds a map of Variant objects indexed by a string.\nIt can be used for system-wide or scene-wide data sharing.\nTo access an individual value, use the index operator. Example:",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "ContainsKey",
						"code_hint": "Function ContainsKey(key As String) As Boolean",
						"description": "Tests whether an element with the specified key is in the map.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CreateKey",
						"code_hint": "Function CreateKey(key As String) As Boolean",
						"description": "Creates a new empty variable.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "DeleteKey",
						"code_hint": "Function DeleteKey(key As String) As Boolean",
						"description": "Deletes a variable.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetKeys",
						"code_hint": "Sub GetKeys(keys As Array[String])",
						"description": "Fills the passed array with all defined keys.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "LoadFromDb",
						"code_hint": "Function LoadFromDb(path As String) As Boolean",
						"description": "Loads the contents of the map from a database file. The file is specified by path, which must be an absolute path, such as \"/User/mem_map\".",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "LoadFromDbAsync",
						"code_hint": "Function LoadFromDbAsync(path As String) As Boolean",
						"description": "Loads the contents of the map from a database file. The file is specified by path, which must be an absolute path, such as \"/User/mem_map\". This function is called asynchronous, so the value does not have to be loaded when the function returns.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "RegisterChangedCallback",
						"code_hint": "Sub RegisterChangedCallback(key As String)",
						"description": "Causes OnSharedMemoryVariableChanged to be invoked whenever the variable identified by key is changed and OnSharedMemoryVariableDeleted in response to the key being deleted. If you pass an empty string for key, the callbacks will be invoked whenever any variable in the map is changed or deleted.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SaveToDb",
						"code_hint": "Function SaveToDb(path As String) As Boolean",
						"description": "Saves the contents of the map into a database file. The file is specified by path, which must be an absolute path, such as \"/User/mem_map\". Attention: If you are calling this function with a high frequency (e.g.: in OnExecPerField) then this can result in slow rendering and incomplete GH replications!",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SaveToDbAsync",
						"code_hint": "Function SaveToDbAsync(path As String) As Boolean",
						"description": "Saves the contents of the map into a database file. The file is specified by path, which must be an absolute path, such as \"/User/mem_map\". This function is called asynchronous, so the value does not have to be stored when the function returns.Attention: asynchronous call",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetValueDelayed",
						"code_hint": "Function SetValueDelayed(key As String, value As Variant) As Boolean",
						"description": "Sets value via the corresponding transport mechanism (e.g. GraphicHub). This prevents possible re-triggering of the OnSharedMemoryVariableChanged callback.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "UnregisterChangedCallback",
						"code_hint": "Sub UnregisterChangedCallback(key As String)",
						"description": "Removes the binding set up by RegisterChangedCallback.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Stage",
				"descripton": "A stage object. The Stage member of the Base type provides access to the current scene's stage.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "RootDirector",
						"code_hint": "RootDirector As Director [read-only]",
						"description": "Gets the topmost director in the stage.",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "ContinueAnimation",
						"code_hint": "Sub ContinueAnimation()",
						"description": "Continues the animation.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "CreateRootDirector",
						"code_hint": "Function CreateRootDirector() As Director",
						"description": "If there is no root director this method creates and returns a new one.",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindDirector",
						"code_hint": "Function FindDirector(directorName As String) As Director",
						"description": "Searches for a director named directorName.",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsAnimationRunning",
						"code_hint": "Function IsAnimationRunning() As Boolean",
						"description": "Returns true if the animation active.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "StartAnimation",
						"code_hint": "Sub StartAnimation()",
						"description": "Starts the animation in the directors selected in the diretor tree.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "StopAnimation",
						"code_hint": "Sub StopAnimation()",
						"description": "Stops the animation in all directors.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "String",
				"descripton": "A character string. Use the '&' operator to concatenate strings.",
				"properties": [
					{
						"name": "Length",
						"code_hint": "Length As Integer [read-only]",
						"description": "Gets the length of the string.\nChecking the length of a doublebyte string:\nYou have to make sure to use the correct function for calculating double byte strings. Normal Doublebyte Fonts (Asian/Cyrillic) are calculated wrong if you use the string.length() function.\nSolution: To get the prober length, you have to convert it using Utf8ToAnsi()",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "AnsiToUtf8",
						"code_hint": "Sub AnsiToUtf8()",
						"description": "Converts an ANSI encoded string (using the system code-page) to UTF-8.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Append",
						"code_hint": "Sub Append(str As String)",
						"description": "Appends 'str' to the string",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "EndsWith",
						"code_hint": "Function EndsWith(str As String) As Boolean",
						"description": "Returns true if the string ends with 'str'",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Erase",
						"code_hint": "Sub Erase(pos As Integer, len As Integer)",
						"description": "Erases a range of 'len' characters starting at 'pos'",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "EraseChar",
						"code_hint": "Sub EraseChar(pos As Integer)",
						"description": "Erases the string, starting at 'pos'",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Find",
						"code_hint": "Function Find(substring As String) As Integer",
						"description": "Searches for a substring",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "FindFirstNotOf",
						"code_hint": "Function FindFirstNotOf(chars As String) As Integer",
						"description": "Searches for the first character that is not equal to any character within 'chars'",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "FindFirstOf",
						"code_hint": "Function FindFirstOf(chars As String) As Integer",
						"description": "Searches for the first character that is equal to any character within 'chars'",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "FindLastNotOf",
						"code_hint": "Function FindLastNotOf(chars As String) As Integer",
						"description": "Searches for the last character that is not equal to any character within 'chars'",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "FindLastOf",
						"code_hint": "Function FindLastOf(chars As String) As Integer",
						"description": "Searches for the last character that is equal to any character within 'chars'",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetChar",
						"code_hint": "Function GetChar(pos As Integer) As String",
						"description": "Returns the character at 'pos'",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetSubstring",
						"code_hint": "Function GetSubstring(pos As Integer, len As Integer) As String",
						"description": "Returns a substring",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Insert",
						"code_hint": "Sub Insert(pos As Integer, str As String)",
						"description": "Inserts 'str' before position 'pos'",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Join",
						"code_hint": "Sub Join(strings As Array[String], joiner As String)",
						"description": "Concatenates individual strings",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Left",
						"code_hint": "Function Left(len As Integer) As String",
						"description": "Extracts 'len' characters from the left end of the string",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "MakeLower",
						"code_hint": "Sub MakeLower()",
						"description": "Converts the string to an lower-case string",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "MakeUpper",
						"code_hint": "Sub MakeUpper()",
						"description": "Converts the string to an upper-case string",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Match",
						"code_hint": "Function Match(regex As String) As Boolean",
						"description": "Returns true if the regular expression 'regex' is found int the string",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "PadLeft",
						"code_hint": "Sub PadLeft(totalWidth As Integer, paddingChar As String)",
						"description": "Right-aligns the characters of the string",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "PadRight",
						"code_hint": "Sub PadRight(totalWidth As Integer, paddingChar As String)",
						"description": "Left-aligns the characters of the string",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Prepend",
						"code_hint": "Sub Prepend(str As String)",
						"description": "Inserts 'str' at the beginning of the string",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Replace",
						"code_hint": "Sub Replace(pos As Integer, len As Integer, str As String)",
						"description": "Replaces the substring specified by 'pos' and 'len' with 'str'",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ReplaceChar",
						"code_hint": "Sub ReplaceChar(pos As Integer, str As String)",
						"description": "Replaces the character at 'pos' with 'str'",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "RFind",
						"code_hint": "Function RFind(substring As String) As Integer",
						"description": "Searches backward for a substring",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Right",
						"code_hint": "Function Right(len As Integer) As String",
						"description": "Extracts 'len' characters from the right end of the string",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Split",
						"code_hint": "Sub Split(separators As String, [out] result As Array[String])",
						"description": "Splits a string into substrings; if 'separators' is empty, whitespace sequences act as separators. Example:\ndim a as string = \"Monday Thuesday Wednesday\"\ndim b as array[string]\na.split(\" \",b)\nb will be [\"Monday\",\"Thuesday\",\"Wednesday\"]",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "StartsWith",
						"code_hint": "Function StartsWith(str As String) As Boolean",
						"description": "Returns true if the string starts with 'str'",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Substitute",
						"code_hint": "Function Substitute(regex As String, subst As String, global As Boolean) As Integer",
						"description": "Replaces 'regex' with 'subst'. If 'global' is true, all occurences of 'regex' are replaced. Otherwise, only the first occurrece is replaced.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "TclSplit",
						"code_hint": "Sub TclSplit([out] result As Array[String])",
						"description": "Splits a string TCL-style-wise, using whitespace as separators (TCL-style means: Braced and double-quoted strings are never split even if they contain whitespace).",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Trim",
						"code_hint": "Sub Trim()",
						"description": "Removes whitspace characters from both ends of the string",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "URLDecode",
						"code_hint": "Sub URLDecode()",
						"description": "Decodes a URL as string.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "URLEncode",
						"code_hint": "Sub URLEncode()",
						"description": "Encodes a string as URL.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Utf8ToAnsi",
						"code_hint": "Sub Utf8ToAnsi()",
						"description": "Converts a UTF-8 encoded string to ANSI (using the system code-page).",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "StringMap",
				"descripton": "An associative array that maps strings to Variant objects. Use the index operator [] to access individual elements.",
				"properties": [
					{
						"name": "Size",
						"code_hint": "Size As Integer [read-only]",
						"description": "The size of the string map.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "Clear",
						"code_hint": "Sub Clear()",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ContainsKey",
						"code_hint": "Function ContainsKey(key As String) As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "DeleteKey",
						"code_hint": "Sub DeleteKey(key As String)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetKeys",
						"code_hint": "Sub GetKeys(keys As Array[String])",
						"description": "Fills the passed array with all defined keys.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "SuperChannel",
				"descripton": "Super-channel objects",
				"properties": [
					{
						"name": "A",
						"code_hint": "A As ProxyChannel [read-only]",
						"description": "Get sub-channel A.",
						"return_value": "ProxyChannel",
						"deprecated": "false"
					},
					{
						"name": "Alpha",
						"code_hint": "Alpha As Double",
						"description": "(Inherited from AVChannel) Alpha of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "B",
						"code_hint": "B As ProxyChannel [read-only]",
						"description": "Get sub-channel B.",
						"return_value": "ProxyChannel",
						"deprecated": "false"
					},
					{
						"name": "Center",
						"code_hint": "Center As Vertex",
						"description": "(Inherited from AVChannel) Transformation center of this AVChannel",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentBorderColor",
						"code_hint": "ContentBorderColor As Color",
						"description": "(Inherited from AVChannel) AVChannel content border color",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "ContentCenter",
						"code_hint": "ContentCenter As Vertex",
						"description": "(Inherited from AVChannel) AVChannel content relative center in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentCropBottom",
						"code_hint": "ContentCropBottom As Integer",
						"description": "(Inherited from AVChannel) AVChannel content bottom crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropLeft",
						"code_hint": "ContentCropLeft As Integer",
						"description": "(Inherited from AVChannel) AVChannel content left crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropRight",
						"code_hint": "ContentCropRight As Integer",
						"description": "(Inherited from AVChannel) AVChannel content right crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentCropTop",
						"code_hint": "ContentCropTop As Integer",
						"description": "(Inherited from AVChannel) AVChannel content top crop",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ContentPosition",
						"code_hint": "ContentPosition As Vertex",
						"description": "(Inherited from AVChannel) AVChannel content relative position in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentSize",
						"code_hint": "ContentSize As Vertex",
						"description": "(Inherited from AVChannel) AVChannel content relative size in percent",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ContentZoomMode",
						"code_hint": "ContentZoomMode As Integer",
						"description": "(Inherited from AVChannel) AVChannel content zoom mode",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ControlledAnimation",
						"code_hint": "ControlledAnimation As Boolean",
						"description": "(Inherited from AVChannel) Is animation controlled by parent Scene or by this AVChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CropBottom",
						"code_hint": "CropBottom As Double",
						"description": "(Inherited from AVChannel) Bottom crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropLeft",
						"code_hint": "CropLeft As Double",
						"description": "(Inherited from AVChannel) Left crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropRight",
						"code_hint": "CropRight As Double",
						"description": "(Inherited from AVChannel) Right crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CropTop",
						"code_hint": "CropTop As Double",
						"description": "(Inherited from AVChannel) Top crop of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ForceKey",
						"code_hint": "ForceKey As Boolean",
						"description": "(Inherited from AVChannel) Force key of this AVChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "KeepAspect",
						"code_hint": "KeepAspect As Boolean",
						"description": "(Inherited from AVChannel) Keep aspect of this AVChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MasterVolume",
						"code_hint": "MasterVolume As Double",
						"description": "(Inherited from AVChannel) Master volume of this AVChannel",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Pending",
						"code_hint": "Pending As ProxyChannel [read-only]",
						"description": "Get pending sub-channel. This channel is not valid during transitions. Check with IsValid.",
						"return_value": "ProxyChannel",
						"deprecated": "false"
					},
					{
						"name": "Playing",
						"code_hint": "Playing As ProxyChannel [read-only]",
						"description": "Get playing sub-channel. This channel is not valid during transitions. Check with IsValid.",
						"return_value": "ProxyChannel",
						"deprecated": "false"
					},
					{
						"name": "Position",
						"code_hint": "Position As Vertex",
						"description": "(Inherited from AVChannel) Position of this AVChannel",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenCenter",
						"code_hint": "ScreenCenter As Vertex",
						"description": "(Inherited from AVChannel) Transformation center of this AVChannel (in Pixels)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropBottom",
						"code_hint": "ScreenCropBottom As Double",
						"description": "(Inherited from AVChannel) Bottom crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropLeft",
						"code_hint": "ScreenCropLeft As Double",
						"description": "(Inherited from AVChannel) Left crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropRight",
						"code_hint": "ScreenCropRight As Double",
						"description": "(Inherited from AVChannel) Right crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenCropTop",
						"code_hint": "ScreenCropTop As Double",
						"description": "(Inherited from AVChannel) Top crop of this AVChannel (in Pixels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "ScreenPosition",
						"code_hint": "ScreenPosition As Vertex",
						"description": "(Inherited from AVChannel) Position of this AVChannel (in Pixels)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ScreenSize",
						"code_hint": "ScreenSize As Vertex",
						"description": "(Inherited from AVChannel) Size of this AVChannel (in Pixels)",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Size",
						"code_hint": "Size As Vertex",
						"description": "(Inherited from AVChannel) Size of this AVChannel",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "TransitionAB",
						"code_hint": "TransitionAB As Director [read-only]",
						"description": "Get director transition.",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "TransitionABManual",
						"code_hint": "TransitionABManual As Director",
						"description": "Get or set director transition.",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "TransitionABReverse",
						"code_hint": "TransitionABReverse As Boolean",
						"description": "Get or set director transition reverse direction.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "TransitionAutoMode",
						"code_hint": "TransitionAutoMode As Boolean",
						"description": "Get or set status of transition mode.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "TransitionBA",
						"code_hint": "TransitionBA As Director [read-only]",
						"description": "Get director transition.",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "TransitionBAManual",
						"code_hint": "TransitionBAManual As Director",
						"description": "Get or set director transition.",
						"return_value": "Director",
						"deprecated": "false"
					},
					{
						"name": "TransitionBAReverse",
						"code_hint": "TransitionBAReverse As Boolean",
						"description": "Get or set director transition reverse direction.",
						"return_value": "Boolean",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "GetAudioChannelVolume",
						"code_hint": "Function GetAudioChannelVolume(param_1 As Integer) As Double",
						"description": "(Inherited from AVChannel) Volume of audio channel (up to 16 channels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "IsValid",
						"code_hint": "Function IsValid() As Boolean",
						"description": "Is this a valid SuperChannel",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsValid",
						"code_hint": "Function IsValid() As Boolean",
						"description": "(Inherited from AVChannel) Checks if this AVChannel is valid",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetAudioChannelVolume",
						"code_hint": "Function SetAudioChannelVolume(param_1 As Integer) As Double",
						"description": "(Inherited from AVChannel) Volume of audio channel (up to 16 channels)",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Toggle",
						"code_hint": "Function Toggle() As Boolean",
						"description": "Toggles playing and pending channel",
						"return_value": "Boolean",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "System",
				"descripton": "This type provides access to system-wide parameters and procedures.",
				"properties": [
					{
						"name": "BackScene",
						"code_hint": "BackScene As Scene [read-only]",
						"description": "Returns the scene that is in the back layer of the scene/render editor.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "CurrentDirectoryPath",
						"code_hint": "CurrentDirectoryPath As String",
						"description": "Gets or sets the current directory path.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "CurrentRefreshRate",
						"code_hint": "CurrentRefreshRate As Double [read-only]",
						"description": "Gets the current refresh rate in seconds.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "EngineInstance",
						"code_hint": "EngineInstance As Integer [read-only]",
						"description": "Get the instance of VizEngine.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "FrontScene",
						"code_hint": "FrontScene As Scene [read-only]",
						"description": "Returns the scene that is in the front layer of the scene/render editor.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "GpuCount",
						"code_hint": "GpuCount As Integer [read-only]",
						"description": "Get the number of GPUs.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GpuDevice",
						"code_hint": "GpuDevice As Integer [read-only]",
						"description": "Get the GPU instance.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "HostName",
						"code_hint": "HostName As String [read-only]",
						"description": "Gets the host name of the local computer.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "IPAddressString",
						"code_hint": "IPAddressString As String [read-only]",
						"description": "Gets the IP address of the local computer. The format is a string that looks like \"10.211.54.199\".",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "IsPostRecording",
						"code_hint": "IsPostRecording As Boolean [read-only]",
						"description": "Determines if in post mode.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "LButtonState",
						"code_hint": "LButtonState As Boolean [read-only]",
						"description": "True if the left mouse button is pressed.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MainScene",
						"code_hint": "MainScene As Scene [read-only]",
						"description": "Returns the scene that is in the main layer of the scene/render editor.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Map",
						"code_hint": "Map As SharedMemory [read-only]",
						"description": "The global memory map, used for system-wide data sharing.",
						"return_value": "SharedMemory",
						"deprecated": "false"
					},
					{
						"name": "MButtonState",
						"code_hint": "MButtonState As Boolean [read-only]",
						"description": "True if the middle mouse button is pressed.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MouseX",
						"code_hint": "MouseX As Integer [read-only]",
						"description": "Gets the x position of the mouse cursor (in screen coordinates).",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "MouseY",
						"code_hint": "MouseY As Integer [read-only]",
						"description": "Gets the y position of the mouse cursor (in screen coordinates).",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "OutputAspect",
						"code_hint": "OutputAspect As Double [read-only]",
						"description": "Gets the output aspect ratio.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "OutputFieldDominance",
						"code_hint": "OutputFieldDominance As Integer [read-only]",
						"description": "Gets the field dominance of current the output field. (0=first field or progressive, 1=second field; )",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "OutputInterlaced",
						"code_hint": "OutputInterlaced As Boolean [read-only]",
						"description": "Determines if the output format is interlaced.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "OutputRefreshRate",
						"code_hint": "OutputRefreshRate As Double [read-only]",
						"description": "Gets the output refresh rate in seconds.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "OutputRetraceCounter",
						"code_hint": "OutputRetraceCounter As Integer [read-only]",
						"description": "Gets the retrace counter.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "OutputRingbufferSize",
						"code_hint": "OutputRingbufferSize As Integer [read-only]",
						"description": "Configured size of output ringbuffer.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "OutputRingbufferUsed",
						"code_hint": "OutputRingbufferUsed As Integer [read-only]",
						"description": "Number of filled fields in the output ringbuffer.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "OutputSystem",
						"code_hint": "OutputSystem As Integer [read-only]",
						"description": "Gets the output system. (VIZ_INACTIVE, VIZ_COMP_480I_5994, VIZ_COMP_576I_5000, VIZ_SDI_480I_5994_SMPTE259_NTSC, VIZ_SDI_576I_5000_SMPTE259_PAL, VIZ_SDI_720P_5994_SMPTE296, VIZ_SDI_720P_6000_SMPTE296, VIZ_SDI_1035I_5994_SMPTE260, VIZ_SDI_1035I_6000_SMPTE260, VIZ_SDI_1080I_5000_SMPTE295, VIZ_SDI_1080I_5000_SMPTE274, VIZ_SDI_1080I_5994_SMPTE274, VIZ_SDI_1080I_6000_SMPTE274, VIZ_SDI_1080PSF_23976_SMPTE274, VIZ_SDI_1080PSF_2400_SMPTE274, VIZ_SDI_1080PSF_2500_SMPTE274, VIZ_SDI_1080P_23976_SMPTE274, VIZ_SDI_1080P_2400_SMPTE274, VIZ_SDI_1080P_2500_SMPTE274, VIZ_SDI_1080P_2997_SMPTE274, VIZ_SDI_1080P_3000_SMPTE274, VIZ_SDI_720P_5000_SMPTE296, VIZ_SDI_720P_3000_SMPTE296, VIZ_SDI_720P_2997_SMPTE296, VIZ_SDI_720P_2500_SMPTE296, VIZ_SDI_720P_2400_SMPTE296, VIZ_SDI_720P_2398_SMPTE296, VIZ_SDI_1080P_5000_SMPTE424M, VIZ_SDI_1080P_5994_SMPTE424M, VIZ_SDI_1080P_6000_SMPTE424M, VIZ_SDI_2048P_24_00_SMPTE372, VIZ_SDI_2048P_25_00_SMPTE372, VIZ_SDI_2048P_29_97_SMPTE372, VIZ_SDI_2048P_30_00_SMPTE372, VIZ_SDI_2160P_2500_UHDTV1, VIZ_SDI_2160P_2997_UHDTV1, VIZ_SDI_2160P_3000_UHDTV1, VIZ_SDI_2160P_5000_SMPTE2036_UHDTV1, VIZ_SDI_2160P_5994_SMPTE2036_UHDTV1, VIZ_SDI_2160P_6000_SMPTE2036_UHDTV1, VIZ_SDI_2160P_5000_SMPTE425_5_UHDTV1, VIZ_SDI_2160P_5994_SMPTE425_5_UHDTV1, VIZ_SDI_2160P_5000_4K, VIZ_SDI_2160P_5994_4K, VIZ_SDI_2160P_6000_4K, VIZ_FULL_SCREEN, VIZ_USER_DEFINED).",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PostCurrentTime",
						"code_hint": "PostCurrentTime As Double [read-only]",
						"description": "Get the current time in post mode.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "PostFieldDominance",
						"code_hint": "PostFieldDominance As Integer [read-only]",
						"description": "Gets the field dominance in post mode. (0=first field or progressive, 1=second field; )",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "PostRetraceCounter",
						"code_hint": "PostRetraceCounter As Integer [read-only]",
						"description": "Gets the retrace counter in post mode.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RButtonState",
						"code_hint": "RButtonState As Boolean [read-only]",
						"description": "True if the right mouse button is pressed.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "RenderEditorHeight",
						"code_hint": "RenderEditorHeight As Integer [read-only]",
						"description": "Gets the height in pixels of the render editor.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RenderEditorWidth",
						"code_hint": "RenderEditorWidth As Integer [read-only]",
						"description": "Gets the width in pixels of the render editor.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Renderer",
						"code_hint": "Renderer As Base [read-only]",
						"description": "The main renderer",
						"return_value": "Base",
						"deprecated": "false"
					},
					{
						"name": "RenderWindowHeight",
						"code_hint": "RenderWindowHeight As Integer [read-only]",
						"description": "Gets the height in pixels of the render window.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RenderWindowWidth",
						"code_hint": "RenderWindowWidth As Integer [read-only]",
						"description": "Gets the width in pixels of the render window.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "ScreenHeight",
						"code_hint": "ScreenHeight As Integer [read-only]",
						"description": "Gets the height in pixels of the screen.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ScreenWidth",
						"code_hint": "ScreenWidth As Integer [read-only]",
						"description": "Gets the width in pixels of the screen.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "ShowMouseCursor",
						"code_hint": "ShowMouseCursor As Boolean",
						"description": "Gets or sets the visibility state of the mouse cursor.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "TraceCount",
						"code_hint": "TraceCount As Integer [read-only]",
						"description": "Returns the number of traces (touch inputs).",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VideoHeight",
						"code_hint": "VideoHeight As Integer [read-only]",
						"description": "Gets the height in pixels of the output video.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "VideooutInputRetraceCounter",
						"code_hint": "VideooutInputRetraceCounter As Integer [read-only]",
						"description": "Gets the retrace counter of the input of the videoout object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "VideooutOutputRetraceCounter",
						"code_hint": "VideooutOutputRetraceCounter As Integer [read-only]",
						"description": "Gets the retrace counter of the output of the videoout object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "VideooutPropagationDelay",
						"code_hint": "VideooutPropagationDelay As Integer [read-only]",
						"description": "Number of fields it takes until a rendered buffer is played out.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "VideooutRetraceCounter",
						"code_hint": "VideooutRetraceCounter As Integer [read-only]",
						"description": "Gets the retrace counter of the videoout object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "VideoWidth",
						"code_hint": "VideoWidth As Integer [read-only]",
						"description": "Gets the width in pixels of the output video.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RefreshRate",
						"code_hint": "RefreshRate As Double [read-only]",
						"description": "Deprecated.",
						"return_value": "Double",
						"deprecated": "true"
					}
				],
				"methods": [
					{
						"name": "DeleteFile",
						"code_hint": "Function DeleteFile(filename As String) As Boolean",
						"description": "Deletes the file filename, returns true when successfully",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "DirectoryExists",
						"code_hint": "Function DirectoryExists(directory As String) As Boolean",
						"description": "Returns true if the directory exists",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ExploreDocument",
						"code_hint": "Function ExploreDocument(filename As String, activate As Boolean) As Boolean",
						"description": "Opens a directory in the Windows Explorer. If activate is false, the Explorer window is minimized.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "FileExists",
						"code_hint": "Function FileExists(filename As String) As Boolean",
						"description": "Returns true if the file exists",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetClipChannel",
						"code_hint": "Function GetClipChannel(param_1 As Integer) As ClipChannel",
						"description": "Gets the Clip Channel n . where n is a zero based index up to exluding GetNumberOfClipChannel()",
						"return_value": "ClipChannel",
						"deprecated": "false"
					},
					{
						"name": "GetDirectoryContent",
						"code_hint": "Function GetDirectoryContent(dirname As String, pattern As String) As Array[String]",
						"description": "Returns an array with all files in the directory dirname matching the pattern, e.g.: *.jpg",
						"return_value": "Array[String]",
						"deprecated": "false"
					},
					{
						"name": "GetElapsedTime",
						"code_hint": "Function GetElapsedTime() As Double",
						"description": "Gets the time (in seconds) that has passed since Viz was started.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "GetLiveChannel",
						"code_hint": "Function GetLiveChannel(param_1 As Integer) As LiveChannel",
						"description": "Gets the Live Channel n . where n is a zero based index up to exluding GetNumberOfLiveChannel()",
						"return_value": "LiveChannel",
						"deprecated": "false"
					},
					{
						"name": "GetNumberOfActiveClipChannel",
						"code_hint": "Function GetNumberOfActiveClipChannel() As Integer",
						"description": "Gets the number of available and active Clip Channels",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetNumberOfActiveLiveChannel",
						"code_hint": "Function GetNumberOfActiveLiveChannel() As Integer",
						"description": "Gets the number of available and active Live Channels",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetNumberOfClipChannel",
						"code_hint": "Function GetNumberOfClipChannel() As Integer",
						"description": "Gets the number of available Clip Channels",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetNumberOfLiveChannel",
						"code_hint": "Function GetNumberOfLiveChannel() As Integer",
						"description": "Gets the number of available Live Channels",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetNumberOfTimecodeSources",
						"code_hint": "Function GetNumberOfTimecodeSources() As Integer",
						"description": "Returns the number of registered timecodes.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetTimecode",
						"code_hint": "Function GetTimecode(Device As String, Type As String) As Timecode",
						"description": "Returns a timecode object from device with type.",
						"return_value": "Timecode",
						"deprecated": "false"
					},
					{
						"name": "GetTimecodeByIndex",
						"code_hint": "Function GetTimecodeByIndex(Index As Integer) As Timecode",
						"description": "Returns a timecode object by its index.",
						"return_value": "Timecode",
						"deprecated": "false"
					},
					{
						"name": "GetTrace",
						"code_hint": "Function GetTrace(id As Integer) As Trace",
						"description": "Returns the trace with the passed trace Id",
						"return_value": "Trace",
						"deprecated": "false"
					},
					{
						"name": "GetTraceByIndex",
						"code_hint": "Function GetTraceByIndex(index As Integer) As Trace",
						"description": "Returns the trace with the passed index",
						"return_value": "Trace",
						"deprecated": "false"
					},
					{
						"name": "GetTrackedCameraTimecode",
						"code_hint": "Function GetTrackedCameraTimecode(Index As Integer) As Timecode",
						"description": "Returns a test value in order to see if we can add a method this way.",
						"return_value": "Timecode",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "IsKeyDown",
						"code_hint": "Function IsKeyDown(keyCode As Integer) As Boolean",
						"description": "Returns true if the specified key is pressed.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "LoadBackScene",
						"code_hint": "Function LoadBackScene(scenepath As String) As Scene",
						"description": "Loads a scene file into the back layer of the scene/render editor.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "LoadFrontScene",
						"code_hint": "Function LoadFrontScene(scenepath As String) As Scene",
						"description": "Loads a scene file into the front layer of the scene/render editor.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "LoadMainScene",
						"code_hint": "Function LoadMainScene(scenepath As String) As Scene",
						"description": "Loads a scene file into the main layer of the scene/render editor.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "LoadTextFile",
						"code_hint": "Function LoadTextFile(filepath As String, [out] result As String) As Boolean",
						"description": "Loads the text file identified by filepath into result. Returns false if the file does not exist or is not accessible.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MouseOverIPDefineServer",
						"code_hint": "Function MouseOverIPDefineServer(serverAddress As String, serverPort As Integer, localPort As Integer) As Integer",
						"description": "Define another VizMouseServer",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "MouseOverIPQuitServer",
						"code_hint": "Function MouseOverIPQuitServer() As Boolean",
						"description": "Kill the all defined VizMouseServer",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MouseOverIPQuitServer",
						"code_hint": "Function MouseOverIPQuitServer(serverID As Integer) As Boolean",
						"description": "Kill this VizMouseServer",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MouseOverIPRegister",
						"code_hint": "Function MouseOverIPRegister() As Boolean",
						"description": "Register the viz engine as client to receive mouse events from all defined VizMouseServer",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MouseOverIPRegister",
						"code_hint": "Function MouseOverIPRegister(serverID As Integer) As Boolean",
						"description": "Register the viz engine as client to receive mouse events from this VizMouseServer",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MouseOverIPUndefineAllServers",
						"code_hint": "Function MouseOverIPUndefineAllServers() As Boolean",
						"description": "Undefine all known VizMouseServers.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MouseOverIPUndefineServer",
						"code_hint": "Function MouseOverIPUndefineServer(serverAddress As String, serverPort As Integer, localPort As Integer) As Boolean",
						"description": "Unefine the VizMouseServer with the address serverAddress, the server port serverPort and the local listening port localPort",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MouseOverIPUndefineServer",
						"code_hint": "Function MouseOverIPUndefineServer(serverID As Integer) As Boolean",
						"description": "Undefine the VizMouseServer with the ID serverID.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MouseOverIPUnregister",
						"code_hint": "Function MouseOverIPUnregister() As Boolean",
						"description": "Unregister the viz engine from all defined VizMouseServer",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MouseOverIPUnregister",
						"code_hint": "Function MouseOverIPUnregister(serverID As Integer) As Boolean",
						"description": "Unregister the viz engine from this VizMouseServer",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MouseOverIPUnregisterAll",
						"code_hint": "Function MouseOverIPUnregisterAll() As Boolean",
						"description": "Unregister all viz engines from all defined VizMouseServer",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "MouseOverIPUnregisterAll",
						"code_hint": "Function MouseOverIPUnregisterAll(serverID As Integer) As Boolean",
						"description": "Unregister all viz engines from this VizMouseServer",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "OpenDocument",
						"code_hint": "Function OpenDocument(filename As String, activate As Boolean) As Boolean",
						"description": "Opens a document file. If activate is false, the application loading the file is minimized.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "PlaySound",
						"code_hint": "Sub PlaySound(filename As String)",
						"description": "Plays a sound file.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SaveTextFile",
						"code_hint": "Function SaveTextFile(filepath As String, text As String) As Boolean",
						"description": "Saves the contents of text into the file identified by filepath. Returns false if the file cannot be written to.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SendCommand",
						"code_hint": "Function SendCommand(command As String) As String",
						"description": "Sends a command to the local viz engine.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "SendRemoteCommand",
						"code_hint": "Function SendRemoteCommand(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String",
						"description": "Sends a command string to a viz engine running on another PC.\nIf timeoutInMs > 0, the procedure waits at most timeoutInMs milliseconds for an answer, and susequently returns that answer.\nIf timeoutInMs = 0, the procedure returns immediatly, ignoring any answer.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "StartApplication",
						"code_hint": "Function StartApplication(filename As String, parameters As String, activate As Boolean) As Boolean",
						"description": "Launches an application. If activate is false, the application window is minimized.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "StopSound",
						"code_hint": "Sub StopSound()",
						"description": "Stops sound playback. See PlaySound.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "TcpSend",
						"code_hint": "Function TcpSend(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String",
						"description": "Sends a command string via TCP/IP to a remote socket. Unlike SendRemoteCommand, this procedure sends the command string as is, that is without a viz command identifier attached.\nThe timeoutInMs has the same meaning as for SendRemoteCommand.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "TcpSendAsync",
						"code_hint": "Sub TcpSendAsync(sharedMemoryKey As String, hostname As String, port As Integer, commandString As String, timeoutInMs As Integer)",
						"description": "Sends a command string via TCP/IP to a remote socket. Unlike TcpSend, this procedure works asynchron and the return result is stored in a shared memory map, at your defined sharedMemoryKey.\nThe defined sharedMemoryKey or its RegisterChangedCallback will be searched in the maps in the following order: Scene.Map, System.Map and VizCommunication.Map\nIf timeoutInMs is set to 0 then TcpSendAsync will wait until a answer is received or as long as no error occurs (e.g. host doesn't exist).",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "TcpSendAsyncStatus",
						"code_hint": "Sub TcpSendAsyncStatus(sharedMemoryKey As String, hostname As String, port As Integer, commandString As String, timeoutInMs As Integer, sharedMemoryKeyStatus As String)",
						"description": "Same as TcpSendAsync but with additional status Shared Memory Key which informs you about the transmission process. The following Messages (Strings) will be returned in sharedMemoryKeyStatus:\nSENDING\nRECEIVED\nERROR\nTIMEOUT\nThe timeoutInMs has the same meaning as for TcpSendAsync.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Texture",
				"descripton": "A container's texture object.",
				"properties": [
					{
						"name": "Active",
						"code_hint": "Active As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "EffectType",
						"code_hint": "EffectType As Integer",
						"description": "The effect type:\nTX_EFFECT_BLUR\nTX_EFFECT_MOSAIC",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "EffectValue",
						"code_hint": "EffectValue As Integer",
						"description": "The effect value as an integer ranging 0-100",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "EffectValueDouble",
						"code_hint": "EffectValueDouble As Double",
						"description": "The effect value as a double ranging 0.0-100.0",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "EnvironmentType",
						"code_hint": "EnvironmentType As Integer",
						"description": "The environment type:\nTX_ENV_BLEND\nTX_ENV_DECAL\nTX_ENV_MODULATE",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Image",
						"code_hint": "Image As Image",
						"description": "The texture image",
						"return_value": "Image",
						"deprecated": "false"
					},
					{
						"name": "MapPosition",
						"code_hint": "MapPosition As Vertex",
						"description": "The mapping position",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "MapRotation",
						"code_hint": "MapRotation As Vertex",
						"description": "The mapping rotation",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "MapScaling",
						"code_hint": "MapScaling As Vertex",
						"description": "The mapping scaling",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "MapType",
						"code_hint": "MapType As Integer",
						"description": "The mapping type:\nTX_MAP_VERTEX\nTX_MAP_LINEAR\nTX_MAP_REFLECT\nTX_MAP_SPHERICAL\nTX_MAP_CYLINDRICAL\nTX_MAP_CUBE",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "QualityType",
						"code_hint": "QualityType As Integer",
						"description": "The quality type:\nTX_QUAL_PIXEL\nTX_QUAL_LINEAR\nTX_QUAL_MIPMAP\nTX_QUAL_SHARPEN",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "SharpenValue",
						"code_hint": "SharpenValue As Integer",
						"description": "The sharpen value as an integer ranging 0-100",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "SharpenValueDouble",
						"code_hint": "SharpenValueDouble As Double",
						"description": "The sharpen value as a double ranging 0.0-100.0",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "WrapType",
						"code_hint": "WrapType As Integer",
						"description": "The wrap type:\nTX_WRAP_REPEAT\nTX_WRAP_CLAMP",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Timecode",
				"descripton": "Class for easier timecode handling.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "Get",
						"code_hint": "Sub Get([out] Hours As Integer, [out] Minutes As Integer, [out] Seconds As Integer, [out] Frames As Integer)",
						"description": "Writes the current value of the timecode into Hours, Minutes, Seconds, and Frames.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Get2",
						"code_hint": "Sub Get2([out] Hours As Integer, [out] Minutes As Integer, [out] Seconds As Integer, [out] Frames As Integer, [out] Field2 As Boolean)",
						"description": "Writes the current value of the timecode into Hours, Minutes, Seconds, Frames, and Field2.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "GetAssigned",
						"code_hint": "Function GetAssigned() As Boolean",
						"description": "Returns true if the Assigned flag is set.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetCheckColorFrame",
						"code_hint": "Function GetCheckColorFrame() As Boolean",
						"description": "Returns true if the CheckColorFrame flag is set.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetCheckDropFrameCompensation",
						"code_hint": "Function GetCheckDropFrameCompensation() As Boolean",
						"description": "Returns true if the time code does drop frame compensation.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetCheckPolarityCorrectness",
						"code_hint": "Function GetCheckPolarityCorrectness() As Boolean",
						"description": "Returns true if the CheckPolarityCorrectness flag is set.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetDevice",
						"code_hint": "Function GetDevice() As String",
						"description": "Returns the device name of the timecode.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetExternalClockRef",
						"code_hint": "Function GetExternalClockRef() As Boolean",
						"description": "Returns true if the timecode is referenced by an external clock.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetField2",
						"code_hint": "Function GetField2() As Boolean",
						"description": "Returns true if the current timecode is at field2.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetFields",
						"code_hint": "Function GetFields() As Integer",
						"description": "Returns the number of fields.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetFieldsIn24H",
						"code_hint": "Function GetFieldsIn24H() As Integer",
						"description": "Returns the number of fields in 24H.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetFrames",
						"code_hint": "Function GetFrames() As Integer",
						"description": "Returns the number of frames.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetProgressive",
						"code_hint": "Function GetProgressive() As Boolean",
						"description": "Returns true the timecode is progressive.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetString",
						"code_hint": "Function GetString() As String",
						"description": "Returns the current value of the timecode as string.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetType",
						"code_hint": "Function GetType() As String",
						"description": "Returns the type of the timecode.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetUserBits",
						"code_hint": "Function GetUserBits() As Integer",
						"description": "Returns the user bits.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Touch",
				"descripton": "",
				"properties": [
					{
						"name": "Direction",
						"code_hint": "Direction As Vertex [read-only]",
						"description": "Returns the touch's pointing direction (e.g. direction of finger) as an uniform vector.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Event",
						"code_hint": "Event As Integer [read-only]",
						"description": "Returns the touch event type (TOUCH_DOWN, TOUCH_MOVE, TOUCH_UP).",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Index",
						"code_hint": "Index As Integer [read-only]",
						"description": "Returns the index of the touch object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Pressure",
						"code_hint": "Pressure As Double [read-only]",
						"description": "Returns the normalized pressure value in the range 0.0 to 1.0.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Timestamp",
						"code_hint": "Timestamp As Double [read-only]",
						"description": "Returns the timestamp of this touch.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Trace",
						"code_hint": "Trace As Trace [read-only]",
						"description": "Returns the parent trace object.",
						"return_value": "Trace",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "xy",
						"code_hint": "xy As Vertex [read-only]",
						"description": "Returns the touch position in screen-coordinates.",
						"return_value": "Vertex",
						"deprecated": "false"
					}
				],
				"methods": []
			},
			{
				"name": "Trace",
				"descripton": "Holds data of a single touch event which is received from the configured multi-touch input source. A touch describes the Event types: down, move and up.",
				"properties": [
					{
						"name": "Id",
						"code_hint": "Id As Integer [read-only]",
						"description": "Returns the Id of the trace object.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "LastTouch",
						"code_hint": "LastTouch As Touch [read-only]",
						"description": "Returns the last touch object.",
						"return_value": "Touch",
						"deprecated": "false"
					},
					{
						"name": "Source",
						"code_hint": "Source As Integer [read-only]",
						"description": "Returns trace source (TRACE_SRC_UNDEFINED, TRACE_SRC_MOUSE, TRACE_SRC_WIN_TOUCH, TRACE_SRC_TUIO, TRACE_SRC_LEAP, TRACE_SRC_WIN_STYLUS).",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "TouchCount",
						"code_hint": "TouchCount As Touch [read-only]",
						"description": "Returns the number of touches within this trace.",
						"return_value": "Touch",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "GetTouch",
						"code_hint": "Function GetTouch(Index As Integer) As Touch",
						"description": "Get Touch object with the defined index.",
						"return_value": "Touch",
						"deprecated": "false"
					},
					{
						"name": "GetType",
						"code_hint": "Sub GetType([out] Type As Integer, [out] SubType As Integer)",
						"description": "Get trace type (and subtype).\nTRACE_TYPE_UNDEFINED (TRACE_TYPE_UNDEFINED),\nTRACE_TYPE_TOOL (TRACE_TYPE_UNDEFINED),\nTRACE_TYPE_FINGER (TRACE_TYPE_UNDEFINED),\nTRACE_TYPE_HAND (TRACE_TYPE_UNDEFINED),\nTRACE_TYPE_PALM (TRACE_TYPE_UNDEFINED),\nTRACE_TYPE_STYLUS (TRACE_TYPE_UNDEFINED, TRACE_TYPE_STYLUS_ERASER),",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Uuid",
				"descripton": "A Universally Unique Identifier.",
				"properties": [
					{
						"name": "FullString",
						"code_hint": "FullString As String [read-only]",
						"description": "Returns the uuid as a string, enclosed in angle brackets, e.g. “7410EF6B-4271-4EFA-8E8E30212D9AD2A5”.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "String",
						"code_hint": "String As String [read-only]",
						"description": "Returns the uuid as a string, e.g. “7410EF6B-4271-4EFA-8E8E30212D9AD2A5”.",
						"return_value": "String",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "GenerateNewUuid",
						"code_hint": "Sub GenerateNewUuid()",
						"description": "Generates a new UUID.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Variant",
				"descripton": "A variant type. Objects of this type can hold objects of any other type.",
				"properties": [],
				"methods": []
			},
			{
				"name": "Vertex",
				"descripton": "A vertex/vector consisting of 3 double components. The components can be accessed either via the x, y and z members, or using the index operator []. For example, v.y and v[1] both refer to the y component.",
				"properties": [
					{
						"name": "Length",
						"code_hint": "Length As Double [read-only]",
						"description": "The length of the vector",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "X",
						"code_hint": "X As Double",
						"description": "The x component",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Y",
						"code_hint": "Y As Double",
						"description": "The y component",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Z",
						"code_hint": "Z As Double",
						"description": "The z component",
						"return_value": "Double",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "DistanceToLine",
						"code_hint": "Function DistanceToLine(linePoint1 As Vertex, linePoint2 As Vertex) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "DistanceToPlane",
						"code_hint": "Function DistanceToPlane(planeNormal As Vertex, planePoint As Vertex) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "DistanceToPlaneSigned",
						"code_hint": "Function DistanceToPlaneSigned(planeNormal As Vertex, planePoint As Vertex) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "FaceOutputNormal",
						"code_hint": "Function FaceOutputNormal(v1 As Vertex, v2 As Vertex, v3 As Vertex) As Double",
						"description": "Calculates the face-output-normal of the passed 3 vertices.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "MirrorAroundLine",
						"code_hint": "Function MirrorAroundLine(linePoint1 As Vertex, linePoint2 As Vertex) As Vertex",
						"description": "",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "MirrorAroundVector",
						"code_hint": "Function MirrorAroundVector(v As Vertex) As Vertex",
						"description": "",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Norm",
						"code_hint": "Function Norm() As Double",
						"description": "Returns the length of the vector.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Normalize",
						"code_hint": "Function Normalize() As Double",
						"description": "Normalizes the vertex, i.e. scales it to length 1.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Project",
						"code_hint": "Function Project(viewMat As Matrix, projMat As Matrix, x As Integer, y As Integer, width As Integer, height As Integer) As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Project",
						"code_hint": "Function Project(mat As Matrix, halfwidth As Integer, halfweight As Integer) As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "ProjectOnLine",
						"code_hint": "Function ProjectOnLine(linePoint1 As Vertex, linePoint2 As Vertex) As Vertex",
						"description": "",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "ProjectOnVector",
						"code_hint": "Function ProjectOnVector(v As Vertex) As Vertex",
						"description": "",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "SquaredNorm",
						"code_hint": "Function SquaredNorm() As Double",
						"description": "Returns the squared length of the vector.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Unproject",
						"code_hint": "Sub Unproject(viewMat As Matrix, projMat As Matrix, x As Integer, y As Integer, width As Integer, height As Integer)",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Unproject",
						"code_hint": "Function Unproject(viewMat As Matrix, projMat As Matrix, x As Integer, y As Integer, width As Integer, height As Integer, plane1 As Vertex, plane2 As Vertex, plane3 As Vertex) As Boolean",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GlNormal",
						"code_hint": "Sub GlNormal()",
						"description": "Deprecated.",
						"return_value": "",
						"deprecated": "true"
					},
					{
						"name": "GlVertex",
						"code_hint": "Sub GlVertex()",
						"description": "Deprecated.",
						"return_value": "",
						"deprecated": "true"
					}
				]
			},
			{
				"name": "VizCommunication",
				"descripton": "This class maintains a group of viz hosts that you can simultaneously send commands to. In addition, there is a SharedMemory member (Map) that shares its data among all engines connected to the database.",
				"properties": [
					{
						"name": "Eventpool",
						"code_hint": "Eventpool As Eventpool [read-only]",
						"description": "(Inherited from Base) Gets system eventpool.",
						"return_value": "Eventpool",
						"deprecated": "false"
					},
					{
						"name": "Map",
						"code_hint": "Map As SharedMemory [read-only]",
						"description": "Distributed shared memory map. Note that other viz machines are notified of changes made to this map only if they running at the time the change is made.",
						"return_value": "SharedMemory",
						"deprecated": "false"
					},
					{
						"name": "Scene",
						"code_hint": "Scene As Scene [read-only]",
						"description": "(Inherited from Base) Gets the current scene.",
						"return_value": "Scene",
						"deprecated": "false"
					},
					{
						"name": "Stage",
						"code_hint": "Stage As Stage [read-only]",
						"description": "(Inherited from Base) Gets the current stage.",
						"return_value": "Stage",
						"deprecated": "false"
					},
					{
						"name": "System",
						"code_hint": "System As System [read-only]",
						"description": "(Inherited from Base) Gets system wide data.",
						"return_value": "System",
						"deprecated": "false"
					},
					{
						"name": "Valid",
						"code_hint": "Valid As Boolean [read-only]",
						"description": "(Inherited from Base) Returns true if the object is valid.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "VizCommunication",
						"code_hint": "VizCommunication As VizCommunication [read-only]",
						"description": "(Inherited from Base) Gets the VizCommunication object.",
						"return_value": "VizCommunication",
						"deprecated": "false"
					},
					{
						"name": "VizEventName",
						"code_hint": "VizEventName As String [read-only]",
						"description": "(Inherited from Base) The object event name which could be used in registerAsListener and the corresponding callback (the viz object event name could change)",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "VizId",
						"code_hint": "VizId As Integer",
						"description": "(Inherited from Base) Gets or sets the internal id of this object.",
						"return_value": "Integer",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "AddHostToGroup",
						"code_hint": "Sub AddHostToGroup(hostname As String, port As Integer)",
						"description": "Adds a hostname to the group of hostnames.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ClearHostGroup",
						"code_hint": "Sub ClearHostGroup()",
						"description": "Clears the group of hostnames.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "FindChannelOfObject",
						"code_hint": "Function FindChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) Finds an animation channel acting on this object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$channelName\" for the channelName argument. Nested directors may be specified like this: \"directorName1$directorName2$channelName\".",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "FindKeyframeOfObject",
						"code_hint": "Function FindKeyframeOfObject(keyframeName As String) As Keyframe",
						"description": "(Inherited from Base) Finds a keyframe acting on the object. If this function is called on a type that cannot be animated (such as Director), it returns null.\nYou can limit the search to a particular director by using the syntax \"directorName$keyframeName\" for the keyframeName argument. Nested directors may be specified like this: \"directorName1$directorName2$keyframeName\".",
						"return_value": "Keyframe",
						"deprecated": "false"
					},
					{
						"name": "FindOrCreateChannelOfObject",
						"code_hint": "Function FindOrCreateChannelOfObject(channelName As String) As Channel",
						"description": "(Inherited from Base) This function works like FindChannelOfObject except that if no animation channel with the specifed name exists, a new one is created.",
						"return_value": "Channel",
						"deprecated": "false"
					},
					{
						"name": "GetChannelsOfObject",
						"code_hint": "Function GetChannelsOfObject([out] v As Array[Channel]) As Integer",
						"description": "(Inherited from Base) Fills the array v with the animation channels acting on this object, returning the number of channels. If this function is called on a type that cannot be animated (such as Director), v will be empty.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsAnimated",
						"code_hint": "Function IsAnimated() As Boolean",
						"description": "(Inherited from Base) Returns true if there are animation channels for this object. If this function is called on a type that cannot be animated (such as Director), it always returns false.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SendVizCommandToHostGroup",
						"code_hint": "Sub SendVizCommandToHostGroup(command As String)",
						"description": "Sends a viz command to the group of hostnames (which was previously filled by calls to AddHostToGroup).",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SetChanged",
						"code_hint": "Sub SetChanged()",
						"description": "(Inherited from Base) Mark this object as changed.",
						"return_value": "",
						"deprecated": "false"
					}
				]
			},
			{
				"name": "Global Procedures",
				"descripton": "",
				"properties": [
					{
						"name": "Null",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "True",
						"code_hint": "",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "False",
						"code_hint": "",
						"description": "",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "If",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Then",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Else",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "ElseIf",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "End",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "While",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "For",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "To",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Each",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "In",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Case",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Select",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Continue",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Do",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Loop",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Next",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Exit",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Step",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Dim",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "As",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Function",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Sub",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Structure",
						"code_hint": "",
						"description": "",
						"return_value": "",
						"deprecated": "false"
					}
				],
				"methods": [
					{
						"name": "Abs",
						"code_hint": "Function Abs(x As Double) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Acos",
						"code_hint": "Function Acos(x As Double) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "AngleBetweenVectors",
						"code_hint": "Function AngleBetweenVectors(v1 As Vertex, v2 As Vertex) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Asc",
						"code_hint": "Function Asc(s As String) As Integer",
						"description": "Returns the ASCII/UTF8 code (0-255) for the specified character.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Asin",
						"code_hint": "Function Asin(x As Double) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Atan",
						"code_hint": "Function Atan(x As Double) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Atan2",
						"code_hint": "Function Atan2(x As Double, y As Double) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CBool",
						"code_hint": "Function CBool(v As Integer) As Boolean",
						"description": "Converts an integer to a boolean.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CBool",
						"code_hint": "Function CBool(v As Double) As Boolean",
						"description": "Converts a double to a boolean.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CBool",
						"code_hint": "Function CBool(v As Uuid) As Boolean",
						"description": "Converts a UUID to a boolean.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "CColor",
						"code_hint": "Function CColor(r As Double, g As Double, b As Double) As Color",
						"description": "Constructs a a color object.",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "CColor",
						"code_hint": "Function CColor(r As Double, g As Double, b As Double, a As Double) As Color",
						"description": "Constructs a a color object.",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "CDbl",
						"code_hint": "Function CDbl(v As Boolean) As Double",
						"description": "Converts a boolean to a double.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CDbl",
						"code_hint": "Function CDbl(v As Integer) As Double",
						"description": "Converts an integer to a double.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CDbl",
						"code_hint": "Function CDbl(v As String) As Double",
						"description": "Converts a string to a double.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Ceil",
						"code_hint": "Function Ceil(x As Double) As Double",
						"description": "Returns the smallest integer that is larger than or equal to x.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Chr",
						"code_hint": "Function Chr(charCode As Integer) As String",
						"description": "Returns the character associated with the specified ASCII/UTF8 code (0-255).",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "CInt",
						"code_hint": "Function CInt(v As Boolean) As Integer",
						"description": "Converts a boolean to an integer.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "CInt",
						"code_hint": "Function CInt(v As Double) As Integer",
						"description": "Converts a double to an integer.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "CInt",
						"code_hint": "Function CInt(v As String) As Integer",
						"description": "Converts a string to an integer.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Cos",
						"code_hint": "Function Cos(x As Double) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Cosh",
						"code_hint": "Function Cosh(x As Double) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "CStr",
						"code_hint": "Function CStr(v As Boolean) As String",
						"description": "Converts a boolean to a string.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "CStr",
						"code_hint": "Function CStr(v As Integer) As String",
						"description": "Converts a integer to a string.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "CStr",
						"code_hint": "Function CStr(v As Double) As String",
						"description": "Converts a double to a string.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "CStr",
						"code_hint": "Function CStr(v As Uuid) As String",
						"description": "Converts a UUID to a string.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "CTrace",
						"code_hint": "Function CTrace(v As Integer) As Trace",
						"description": "Constructs a trace from a integer value.",
						"return_value": "Trace",
						"deprecated": "false"
					},
					{
						"name": "CUuid",
						"code_hint": "Function CUuid(v As String) As Uuid",
						"description": "Constructs a uuid from a string value.",
						"return_value": "Uuid",
						"deprecated": "false"
					},
					{
						"name": "CVertex",
						"code_hint": "Function CVertex(v As Boolean) As Vertex",
						"description": "Constructs a vertex from a bool value, assigning the value to x, y, and z.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "CVertex",
						"code_hint": "Function CVertex(v As Integer) As Vertex",
						"description": "Constructs a vertex from an integer value, assigning the value to x, y, and z.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "CVertex",
						"code_hint": "Function CVertex(v As Double) As Vertex",
						"description": "Constructs a vertex from an double value, assigning the value to x, y, and z.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "CVertex",
						"code_hint": "Function CVertex(x As Double, y As Double, z As Double) As Vertex",
						"description": "Constructs a vertex from 3 double values.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Determinant",
						"code_hint": "Function Determinant(a As Vertex, b As Vertex, c As Vertex) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Distance",
						"code_hint": "Function Distance(v1 As Vertex, v2 As Vertex) As Double",
						"description": "Returns the distance between two vertices.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Distance2",
						"code_hint": "Function Distance2(v1 As Vertex, v2 As Vertex) As Double",
						"description": "Returns the squared distance between two vertices.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "DoubleToString",
						"code_hint": "Function DoubleToString(value As Double, precision As Integer) As String",
						"description": "Converts a double value to a string.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "DoubleToString",
						"code_hint": "Function DoubleToString(value As Double, precision As Integer, width As Integer) As String",
						"description": "Converts a double value to a string.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Exp",
						"code_hint": "Function Exp(x As Double) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Fix",
						"code_hint": "Function Fix(x As Double) As Double",
						"description": "Returns Floor(x) if x larger than or equal to 0.0, otherwise Ceil(x).",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Floor",
						"code_hint": "Function Floor(x As Double) As Double",
						"description": "Returns the largest integer that is smaller than or equal to x.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "GetCurrentTime",
						"code_hint": "Function GetCurrentTime() As DateTime",
						"description": "Gets the current time.",
						"return_value": "DateTime",
						"deprecated": "false"
					},
					{
						"name": "GetParameterBool",
						"code_hint": "Function GetParameterBool(parameterName As String) As Boolean",
						"description": "Returns the value of the Boolean parameter parameterName.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "GetParameterColor",
						"code_hint": "Function GetParameterColor(parameterName As String) As Color",
						"description": "Returns the value of the Color parameter parameterName.",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "GetParameterContainer",
						"code_hint": "Function GetParameterContainer(parameterName As String) As Container",
						"description": "Returns the value of the Container parameter parameterName.",
						"return_value": "Container",
						"deprecated": "false"
					},
					{
						"name": "GetParameterDouble",
						"code_hint": "Function GetParameterDouble(parameterName As String) As Double",
						"description": "Returns the value of the Double parameter parameterName.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "GetParameterInt",
						"code_hint": "Function GetParameterInt(parameterName As String) As Integer",
						"description": "Returns the value of the Integer parameter parameterName.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "GetParameterString",
						"code_hint": "Function GetParameterString(parameterName As String) As String",
						"description": "Returns the value of the String parameter parameterName.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "GetTickCount",
						"code_hint": "Function GetTickCount() As Integer",
						"description": "Returns the processor time in milliseconds. Note that the timing resolution provided by this procedure is fairly low. For more accurate timing, use System.GetElapsedTime() instead.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Int",
						"code_hint": "Function Int(x As Double) As Double",
						"description": "Identical to Floor.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "IntToString",
						"code_hint": "Function IntToString(value As Integer, width As Integer) As String",
						"description": "Converts an integer value to a right-aligned string, filling empty space with blanks.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "IntToString",
						"code_hint": "Function IntToString(value As Integer, width As Integer, addLeadingZeros As Boolean) As String",
						"description": "Converts an integer value to a right-aligned string, filling empty space with blanks or (if addLeadingZeros is true) with zeros.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Len",
						"code_hint": "Function Len(s As String) As Integer",
						"description": "Returns the length of the specified string.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "LineLineIntersection",
						"code_hint": "Function LineLineIntersection(line1Point As Vertex, line1Direction As Vertex, line2Point As Vertex, line2Direction As Vertex) As Vertex",
						"description": "",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Log",
						"code_hint": "Function Log(x As Double) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Max",
						"code_hint": "Function Max(a As Integer, b As Integer) As Integer",
						"description": "Returns the larger of the two values.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Max",
						"code_hint": "Function Max(a As Double, b As Double) As Double",
						"description": "Returns the larger of the two values.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Min",
						"code_hint": "Function Min(a As Integer, b As Integer) As Integer",
						"description": "Returns the smaller of the two values.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Min",
						"code_hint": "Function Min(a As Double, b As Double) As Double",
						"description": "Returns the smaller of the two values.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "PlaneLineIntersection",
						"code_hint": "Function PlaneLineIntersection(planePoint As Vertex, planeNormal As Vertex, linePoint As Vertex, lineDirection As Vertex) As Vertex",
						"description": "",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println()",
						"description": "Prints a newline.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(colorindex As Integer, v As Boolean)",
						"description": "Prints a boolean in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light).",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(v As Boolean)",
						"description": "Prints a boolean.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(v As Vertex)",
						"description": "Prints a vertex.",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(v As Integer)",
						"description": "Prints an integer.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(colorindex As Integer, v As Integer)",
						"description": "Prints an integer in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light).",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(v As Double)",
						"description": "Prints a double.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(colorindex As Integer, v As Double)",
						"description": "Prints a double in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light).",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(v As String)",
						"description": "Prints a string.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(colorindex As Integer, v As String)",
						"description": "Prints a string in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light).",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(colorindex As Integer, v As Vertex)",
						"description": "Prints a vertex in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light).",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(v As Variant)",
						"description": "Prints an object of type Variant.",
						"return_value": "Variant",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(colorindex As Integer, v As Variant)",
						"description": "Prints an object of type Variant in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light).",
						"return_value": "Variant",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(v As Uuid)",
						"description": "Prints a uuid.",
						"return_value": "Uuid",
						"deprecated": "false"
					},
					{
						"name": "Println",
						"code_hint": "Sub Println(colorindex As Integer, v As Uuid)",
						"description": "Prints a uuid in the given color. colorindex can be a combination of 1 (blue), 2 (green), 4 (red), 8 (light).",
						"return_value": "Uuid",
						"deprecated": "false"
					},
					{
						"name": "Random",
						"code_hint": "Function Random() As Double",
						"description": "Returns a random number of type double in the range [0, 1).",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Random",
						"code_hint": "Function Random(i As Integer) As Integer",
						"description": "Returns a random integer in the range 0 through i-1.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RegisterDirSelector",
						"code_hint": "Sub RegisterDirSelector(parameterName As String, label As String, default As String)",
						"description": "Registers a directory parameter.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "RegisterFileSelector",
						"code_hint": "Sub RegisterFileSelector(parameterName As String, label As String, defaultPath As String, defaultFile As String, filter As String)",
						"description": "Registers a file parameter.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "RegisterInfoText",
						"code_hint": "Sub RegisterInfoText(infoText As String)",
						"description": "Call this function to provide documentation for the script (accessible via the 'i'-button).",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterBool",
						"code_hint": "Sub RegisterParameterBool(parameterName As String, label As String, defaultName As Boolean)",
						"description": "Registers a parameter of type Boolean.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterColor",
						"code_hint": "Sub RegisterParameterColor(parameterName As String, label As String, defaultValue As Color)",
						"description": "Registers a parameter of type Color.",
						"return_value": "Color",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterContainer",
						"code_hint": "Sub RegisterParameterContainer(parameterName As String, label As String)",
						"description": "Registers a parameter of type Container.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterDouble",
						"code_hint": "Sub RegisterParameterDouble(parameterName As String, label As String, defaultValue As Double, minValue As Double, maxValue As Double)",
						"description": "Registers a parameter of type Double.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterDropDown",
						"code_hint": "Sub RegisterParameterDropDown(parameterName As String, label As String, default As Integer, entries As Array[String], width As Integer, height As Integer)",
						"description": "Registers a dropdown box. width defines the parameter's width in number of characters and height sets the dropdown box's height in number of lines.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterHList",
						"code_hint": "Sub RegisterParameterHList(parameterName As String, label As String, default As Integer, entries As Array[String], separatorChar As String, width As Integer, height As Integer)",
						"description": "Registers a list box. separatorChar defines the character which is used to separate the values. width and height are defined in pixels.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterImage",
						"code_hint": "Sub RegisterParameterImage(parameterName As String, label As String)",
						"description": "Registers a parameter of type Image.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterInt",
						"code_hint": "Sub RegisterParameterInt(parameterName As String, label As String, defaultValue As Integer, minValue As Integer, maxValue As Integer)",
						"description": "Registers a parameter of type Integer.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterLabel",
						"code_hint": "Sub RegisterParameterLabel(parameterName As String, label As String, width As Integer, height As Integer)",
						"description": "Register a label to be shown in the .",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterList",
						"code_hint": "Sub RegisterParameterList(parameterName As String, label As String, default As Integer, entries As Array[String], width As Integer, height As Integer)",
						"description": "Registers a list box. width and height are defined in pixels.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterSliderDouble",
						"code_hint": "Sub RegisterParameterSliderDouble(parameterName As String, label As String, defaultValue As Double, minValue As Double, maxValue As Double, width As Integer)",
						"description": "Registers a parameter of type Double with slider appearance. width specifies the parameter's width in pixels.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterSliderInt",
						"code_hint": "Sub RegisterParameterSliderInt(parameterName As String, label As String, defaultValue As Integer, minValue As Integer, maxValue As Integer, width As Integer)",
						"description": "Registers a parameter of type Integer with slider appearance. width specifies the parameter's width in pixels.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterString",
						"code_hint": "Sub RegisterParameterString(parameterName As String, label As String, defaultString As String, widgetSize As Integer, maxLength As Integer, charSet As String)",
						"description": "Registers a parameter of type String. If charSet is empty, all characters are allowed.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "RegisterParameterText",
						"code_hint": "Sub RegisterParameterText(parameterName As String, defaultText As String, width As Integer, height As Integer)",
						"description": "Registers a parameter of type String that is entered in a text box. width and height specify the size of the text box in pixels.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RegisterPluginVersion",
						"code_hint": "Sub RegisterPluginVersion(version As Integer, release As Integer, patchlevel As Integer)",
						"description": "You can use this to set information about your script-plugin's version. It's recommended to set version numbers especially for VSL plugins.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RegisterPushButton",
						"code_hint": "Sub RegisterPushButton(parameterName As String, label As String, buttonId As Integer)",
						"description": "Registers a push button.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "RegisterRadioButton",
						"code_hint": "Sub RegisterRadioButton(parameterName As String, label As String, defaultIndex As Integer, buttonNames As Array[String])",
						"description": "Register a block of radio buttons.",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "Round",
						"code_hint": "Function Round(x As Double) As Double",
						"description": "Rounds x to the nearest integer",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "SendGuiParameterShow",
						"code_hint": "Sub SendGuiParameterShow(parameterName As String, state As Integer)",
						"description": "Shows or hides a parameter in the GUI. state can be set to SHOW or HIDE.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "SendGuiParameterUpdate",
						"code_hint": "Sub SendGuiParameterUpdate(parameterName As String, state As Integer)",
						"description": "Enables or disables GUI parameter updates. state can be set to ENABLED or DISABLED.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "SendGuiRefresh",
						"code_hint": "Sub SendGuiRefresh()",
						"description": "Sends a refresh command to the GUI",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "SendGuiStatus",
						"code_hint": "Sub SendGuiStatus(parameterName As String, state As Integer)",
						"description": "Enables or disables a parameter in the GUI. state can be set to ENABLED or DISABLED.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "SetAnimateParameter",
						"code_hint": "Sub SetAnimateParameter(animate As Boolean)",
						"description": "Disable or enable animation on the last registered parameter.",
						"return_value": "Boolean",
						"deprecated": "false"
					},
					{
						"name": "SetHideParameter",
						"code_hint": "Sub SetHideParameter()",
						"description": "Hides the last registered parameter in the GUI.",
						"return_value": "",
						"deprecated": "false"
					},
					{
						"name": "Sign",
						"code_hint": "Function Sign(x As Double) As Integer",
						"description": "Returns -1 if x less than 0.0, 1 if x larger than 0.0, 0 if x equals 0.0.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "Sin",
						"code_hint": "Function Sin(x As Double) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Sinh",
						"code_hint": "Function Sinh(x As Double) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Sqr",
						"code_hint": "Function Sqr(x As Double) As Double",
						"description": "Returns x*x.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Sqrt",
						"code_hint": "Function Sqrt(x As Double) As Double",
						"description": "Computes the square root of x.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "Tan",
						"code_hint": "Function Tan(x As Double) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "TriangleArea",
						"code_hint": "Function TriangleArea(a As Vertex, b As Vertex, c As Vertex) As Double",
						"description": "",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "TriangleCenter",
						"code_hint": "Function TriangleCenter(a As Vertex, b As Vertex, c As Vertex) As Vertex",
						"description": "",
						"return_value": "Vertex",
						"deprecated": "false"
					},
					{
						"name": "UpdateGuiParameterDoubleDefMinMax",
						"code_hint": "Sub UpdateGuiParameterDoubleDefMinMax(parameterName As String, defaultValue As Double, minValue As Double, maxValue As Double)",
						"description": "Sets new default, min and max value for parameters like Double, SliderDouble etc.",
						"return_value": "Double",
						"deprecated": "false"
					},
					{
						"name": "UpdateGuiParameterEntries",
						"code_hint": "Sub UpdateGuiParameterEntries(parameterName As String, entries As Array[String])",
						"description": "Sets new entries for parameters like List or DropDown",
						"return_value": "String",
						"deprecated": "false"
					},
					{
						"name": "UpdateGuiParameterIntDefMinMax",
						"code_hint": "Sub UpdateGuiParameterIntDefMinMax(parameterName As String, defaultValue As Integer, minValue As Integer, maxValue As Integer)",
						"description": "Sets new default, min and max value for parameters like Int, SliderInt etc.",
						"return_value": "Integer",
						"deprecated": "false"
					},
					{
						"name": "IsKeyDown",
						"code_hint": "Function IsKeyDown(keyCode As Integer) As Boolean",
						"description": "Deprecated. Use System.IsKeyDown.",
						"return_value": "Boolean",
						"deprecated": "true"
					},
					{
						"name": "IsLButtonDown",
						"code_hint": "Function IsLButtonDown() As Boolean",
						"description": "Deprecated. System.LButtonState.",
						"return_value": "Boolean",
						"deprecated": "true"
					},
					{
						"name": "IsMButtonDown",
						"code_hint": "Function IsMButtonDown() As Boolean",
						"description": "Deprecated. System.MButtonState.",
						"return_value": "Boolean",
						"deprecated": "true"
					},
					{
						"name": "IsRButtonDown",
						"code_hint": "Function IsRButtonDown() As Boolean",
						"description": "Deprecated. System.RButtonState.",
						"return_value": "Boolean",
						"deprecated": "true"
					},
					{
						"name": "SendCommand",
						"code_hint": "Function SendCommand(command As String) As String",
						"description": "Deprecated. Use System.SendCommand.",
						"return_value": "String",
						"deprecated": "true"
					},
					{
						"name": "SendRemoteCommand",
						"code_hint": "Function SendRemoteCommand(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String",
						"description": "Deprecated. Use System.SendRemoteCommand.",
						"return_value": "String",
						"deprecated": "true"
					},
					{
						"name": "TcpSend",
						"code_hint": "Function TcpSend(hostname As String, port As Integer, commandString As String, timeoutInMs As Integer) As String",
						"description": "Deprecated. Use System.TcpSend.",
						"return_value": "String",
						"deprecated": "true"
					}
				]
			}
		]
	}
}